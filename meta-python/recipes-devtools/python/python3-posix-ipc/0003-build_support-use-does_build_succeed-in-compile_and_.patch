From 760374e778fc28193cfea1416a739e206f9201c6 Mon Sep 17 00:00:00 2001
From: Martin Jansa <martin.jansa@gmail.com>
Date: Mon, 5 May 2025 08:28:56 +0200
Subject: [PATCH] build_support: use does_build_succeed in compile_and_run

* avoid the duplication and building the sniff_mq_prio_max.c twice

Signed-off-by: Martin Jansa <martin.jansa@gmail.com>
Upstream-Status: Submitted [https://github.com/osvenskan/posix_ipc/pull/77]
---
 build_support/discover_system_info.py | 27 ++++++++++-----------------
 1 file changed, 10 insertions(+), 17 deletions(-)

diff --git a/build_support/discover_system_info.py b/build_support/discover_system_info.py
index f8a3c83..f6e6c8c 100644
--- a/build_support/discover_system_info.py
+++ b/build_support/discover_system_info.py
@@ -72,22 +72,17 @@ def does_build_succeed(filename, linker_options=""):
 def compile_and_run(filename, linker_options=""):
     # Utility function that returns the stdout output from running the
     # compiled source file; None if the compile fails.
-    cc = os.getenv("CC", "cc")
-    cmd = "%s -Wall -o ./build_support/src/%s ./build_support/src/%s %s -lpthread" % (cc, filename[:-2], filename, linker_options)
-
-    p = subprocess.Popen(cmd, shell=True, stdout=STDOUT, stderr=STDERR)
-
-    if p.wait():
+    if does_build_succeed(filename, linker_options=""):
+        try:
+            s = subprocess.Popen(["./build_support/src/%s" % filename[:-2]],
+                                 stdout=subprocess.PIPE).communicate()[0]
+            return s.strip().decode()
+        except Exception:
+            # execution resulted in an error
+            return None
+    else:
         # uh-oh, compile failed
         return None
-    
-    try:
-        s = subprocess.Popen(["./build_support/src/%s" % filename[:-2]],
-                             stdout=subprocess.PIPE).communicate()[0]
-        return s.strip().decode()
-    except Exception:
-        # execution resulted in an error
-        return None
 
 
 def get_sysctl_value(name):
@@ -211,11 +206,9 @@ def sniff_mq_prio_max():
     # ref: http://www.opengroup.org/onlinepubs/009695399/basedefs/limits.h.html
     DEFAULT_PRIORITY_MAX = 32
 
-    max_priority = None
     # OS X up to and including 10.8 doesn't support POSIX messages queues and
     # doesn't define MQ_PRIO_MAX. Maybe this aggravation will cease in 10.9?
-    if does_build_succeed("sniff_mq_prio_max.c"):
-        max_priority = compile_and_run("sniff_mq_prio_max.c")
+    max_priority = compile_and_run("sniff_mq_prio_max.c")
 
     if max_priority:
         try:
