From 83093455d02d73a327cea502d974aac82b59ad17 Mon Sep 17 00:00:00 2001
From: Adrian Perez de Castro <aperez@igalia.com>
Date: Tue, 18 Mar 2025 07:39:01 -0700
Subject: [PATCH] Cherry-pick 292304@main (7ffc29624258).
 https://bugs.webkit.org/show_bug.cgi?id=289953

    [GTK][WPE] Use _LIBCPP_HARDENING_MODE with newer libc++ versions
    https://bugs.webkit.org/show_bug.cgi?id=289953

    Reviewed by Alicia Boya Garcia.

    * Source/cmake/OptionsCommon.cmake: Add a new check for the libc++
      version, if it is 19 or newer, use the new _LIBCPP_HARDENING_MODE
      macro, otherwise for older versions keep _LIBCPP_ENABLE_ASSERTIONS.

    Canonical link: https://commits.webkit.org/292304@main

Upstream-Status: Backport [https://github.com/WebKit/WebKit/commit/2c105443d41e5ce3de3a4cac2ed8a07ebd134459]

Canonical link: https://commits.webkit.org/290945.71@webkitglib/2.48

Signed-off-by: Khem Raj <raj.khem@gmail.com>
---
 Source/cmake/OptionsCommon.cmake | 24 +++++++++++++++++++-----
 1 file changed, 19 insertions(+), 5 deletions(-)

diff --git a/Source/cmake/OptionsCommon.cmake b/Source/cmake/OptionsCommon.cmake
index f6cf5ee..3178674 100644
--- a/Source/cmake/OptionsCommon.cmake
+++ b/Source/cmake/OptionsCommon.cmake
@@ -229,8 +229,22 @@ set(CXX_STDLIB_TEST_SOURCE "
 ")
 check_cxx_source_compiles("${CXX_STDLIB_TEST_SOURCE}" CXX_STDLIB_IS_LIBCPP)
 if (CXX_STDLIB_IS_LIBCPP)
-    set(CXX_STDLIB_VARIANT "LIBCPP")
-    set(CXX_STDLIB_ASSERTIONS_MACRO _LIBCPP_ENABLE_ASSERTIONS)
+    set(CXX_STDLIB_TEST_SOURCE "
+        #include <utility>
+        #if _LIBCPP_VERSION >= 190000
+        int main() { }
+        #else
+        #error libc++ is older than 19.x
+        #endif
+    ")
+    check_cxx_source_compiles("${CXX_STDLIB_TEST_SOURCE}" CXX_STDLIB_IS_LIBCPP_19_OR_NEWER)
+    if (CXX_STDLIB_IS_LIBCPP_19_OR_NEWER)
+        set(CXX_STDLIB_VARIANT "LIBCPP 19+")
+        set(CXX_STDLIB_ASSERTIONS_MACRO _LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_EXTENSIVE)
+    else ()
+        set(CXX_STDLIB_VARIANT "LIBCPP <19")
+        set(CXX_STDLIB_ASSERTIONS_MACRO _LIBCPP_ENABLE_ASSERTIONS=1)
+    endif ()
 else ()
     set(CXX_STDLIB_TEST_SOURCE "
     #include <utility>
@@ -239,7 +253,7 @@ else ()
     check_cxx_source_compiles("${CXX_STDLIB_TEST_SOURCE}" CXX_STDLIB_IS_GLIBCXX)
     if (CXX_STDLIB_IS_GLIBCXX)
         set(CXX_STDLIB_VARIANT "GLIBCXX")
-        set(CXX_STDLIB_ASSERTIONS_MACRO _GLIBCXX_ASSERTIONS)
+        set(CXX_STDLIB_ASSERTIONS_MACRO _GLIBCXX_ASSERTIONS=1)
     endif ()
 endif ()
 message(STATUS "C++ standard library in use: ${CXX_STDLIB_VARIANT}")
@@ -255,8 +269,8 @@ option(USE_CXX_STDLIB_ASSERTIONS
 
 if (USE_CXX_STDLIB_ASSERTIONS)
     if (CXX_STDLIB_ASSERTIONS_MACRO)
-        message(STATUS "  Assertions enabled, ${CXX_STDLIB_ASSERTIONS_MACRO}=1")
-        add_compile_definitions("${CXX_STDLIB_ASSERTIONS_MACRO}=1")
+        message(STATUS "  Assertions enabled, ${CXX_STDLIB_ASSERTIONS_MACRO}")
+        add_compile_definitions("${CXX_STDLIB_ASSERTIONS_MACRO}")
     else ()
         message(STATUS "  Assertions disabled, CXX_STDLIB_ASSERTIONS_MACRO undefined")
     endif ()
