From 81897862edea81e9620493c473f488d1820bcf93 Mon Sep 17 00:00:00 2001
From: Jari Sundell <sundell.software@gmail.com>
Date: Tue, 3 Dec 2019 21:53:48 +0900
Subject: [PATCH] Fix compiler warnings. (#204)

---
 configure.ac                      |  6 ++-
 scripts/ax_execinfo.m4            | 67 +++++++++++++++++++++++++++++++
 scripts/common.m4                 | 15 -------
 scripts/rak_execinfo.m4           | 11 +++++
 src/torrent/exceptions.cc         |  4 +-
 test/Makefile.am                  | 15 ++-----
 test/helpers/expect_fd.h          |  8 ++--
 test/helpers/mock_compare.h       |  6 +--
 test/helpers/progress_listener.cc |  3 +-
 test/main.cc                      |  4 +-
 test/net/Makefile.am              | 40 ++++++++++++++++++
 test/torrent/net/Makefile.am      | 44 ++++++++++++++++++++
 test/torrent/net/test_fd.cc       | 48 +++++++++++-----------
 13 files changed, 207 insertions(+), 64 deletions(-)
 create mode 100644 scripts/ax_execinfo.m4
 create mode 100644 scripts/rak_execinfo.m4
 create mode 100644 test/net/Makefile.am
 create mode 100644 test/torrent/net/Makefile.am

diff --git a/configure.ac b/configure.ac
index 620ca552..b6708366 100644
--- a/configure.ac
+++ b/configure.ac
@@ -33,6 +33,7 @@ RAK_CHECK_CXXFLAGS
 RAK_ENABLE_DEBUG
 RAK_ENABLE_EXTRA_DEBUG
 RAK_ENABLE_WERROR
+RAK_DISABLE_BACKTRACE
 
 RAK_CHECK_CXX11
 
@@ -57,8 +58,8 @@ TORRENT_WITH_INOTIFY
 
 CC_ATTRIBUTE_VISIBILITY
 
-AX_PTHREAD
 AX_CHECK_ZLIB
+AX_PTHREAD
 
 PKG_CHECK_MODULES([CPPUNIT], [cppunit],, [no_cppunit="yes"])
 
@@ -74,7 +75,6 @@ AC_CHECK_FUNCS(posix_memalign)
 TORRENT_CHECK_MADVISE()
 TORRENT_CHECK_CACHELINE()
 TORRENT_CHECK_POPCOUNT()
-TORRENT_CHECK_EXECINFO()
 TORRENT_CHECK_PTHREAD_SETNAME_NP()
 TORRENT_MINCORE()
 
@@ -111,4 +111,6 @@ AC_OUTPUT([
 	src/tracker/Makefile
 	src/utils/Makefile
         test/Makefile
+        test/torrent/net/Makefile
+        test/net/Makefile
 ])
diff --git a/scripts/ax_execinfo.m4 b/scripts/ax_execinfo.m4
new file mode 100644
index 00000000..0ff5fc0e
--- /dev/null
+++ b/scripts/ax_execinfo.m4
@@ -0,0 +1,67 @@
+# ===========================================================================
+#       https://www.gnu.org/software/autoconf-archive/ax_execinfo.html
+# ===========================================================================
+#
+# SYNOPSIS
+#
+#   AX_EXECINFO([ACTION-IF-EXECINFO-H-IS-FOUND], [ACTION-IF-EXECINFO-H-IS-NOT-FOUND], [ADDITIONAL-TYPES-LIST])
+#
+# DESCRIPTION
+#
+#   Checks for execinfo.h header and if the len parameter/return type can be
+#   found from a list, also define backtrace_size_t to that type.
+#
+#   By default the list of types to try contains int and size_t, but should
+#   some yet undiscovered system use e.g. unsigned, the 3rd argument can be
+#   used for extensions. I'd like to hear of further suggestions.
+#
+#   Executes ACTION-IF-EXECINFO-H-IS-FOUND when present and the execinfo.h
+#   header is found or ACTION-IF-EXECINFO-H-IS-NOT-FOUND in case the header
+#   seems unavailable.
+#
+#   Also adds -lexecinfo to LIBS on BSD if needed.
+#
+# LICENSE
+#
+#   Copyright (c) 2014 Thomas Jahns <jahns@dkrz.de>
+#
+#   Copying and distribution of this file, with or without modification, are
+#   permitted in any medium without royalty provided the copyright notice
+#   and this notice are preserved. This file is offered as-is, without any
+#   warranty.
+
+#serial 2
+
+AC_DEFUN([AX_EXECINFO],
+  [AC_CHECK_HEADERS([execinfo.h])
+   AS_IF([test x"$ac_cv_header_execinfo_h" = xyes],
+     [AC_CACHE_CHECK([size parameter type for backtrace()],
+	[ax_cv_proto_backtrace_type],
+	[AC_LANG_PUSH([C])
+	 for ax_cv_proto_backtrace_type in size_t int m4_ifnblank([$3],[$3 ])none; do
+	   AS_IF([test "${ax_cv_proto_backtrace_type}" = none],
+	     [ax_cv_proto_backtrace_type= ; break])
+	   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([
+#include <execinfo.h>
+extern
+${ax_cv_proto_backtrace_type} backtrace(void **addrlist, ${ax_cv_proto_backtrace_type} len);
+char **backtrace_symbols(void *const *buffer, ${ax_cv_proto_backtrace_type} size);
+])],
+	   [break])
+	 done
+	 AC_LANG_POP([C])])])
+   AS_IF([test x${ax_cv_proto_backtrace_type} != x],
+     [AC_DEFINE_UNQUOTED([backtrace_size_t], [$ax_cv_proto_backtrace_type],
+        [Defined to return type of backtrace().])])
+   AC_SEARCH_LIBS([backtrace],[execinfo])
+   AS_IF([test x"${ax_cv_proto_backtrace_type}" != x -a x"$ac_cv_header_execinfo_h" = xyes -a x"$ac_cv_search_backtrace" != xno],
+     [AC_DEFINE([HAVE_BACKTRACE],[1],
+        [Defined if backtrace() could be fully identified.])
+     ]m4_ifnblank([$1],[$1
+]),m4_ifnblank([$2],[$2
+]))])
+dnl
+dnl Local Variables:
+dnl mode: autoconf
+dnl End:
+dnl
diff --git a/scripts/common.m4 b/scripts/common.m4
index b6d051f5..55e8d66e 100644
--- a/scripts/common.m4
+++ b/scripts/common.m4
@@ -150,21 +150,6 @@ dnl   Need to fix this so that it uses the stuff defined by the system.
   ])
 ])
 
-AC_DEFUN([TORRENT_CHECK_EXECINFO], [
-  AC_MSG_CHECKING(for execinfo.h)
-
-  AC_COMPILE_IFELSE([AC_LANG_SOURCE([
-      #include <execinfo.h>
-      int main() { backtrace((void**)0, 0); backtrace_symbols((char**)0, 0); return 0;}
-      ])],
-    [
-      AC_MSG_RESULT(yes)
-      AC_DEFINE(USE_EXECINFO, 1, Use execinfo.h)
-    ], [
-      AC_MSG_RESULT(no)
-  ])
-])
-
 AC_DEFUN([TORRENT_CHECK_ALIGNED], [
   AC_MSG_CHECKING(the byte alignment)
 
diff --git a/scripts/rak_execinfo.m4 b/scripts/rak_execinfo.m4
new file mode 100644
index 00000000..c1d9b2f8
--- /dev/null
+++ b/scripts/rak_execinfo.m4
@@ -0,0 +1,11 @@
+AC_DEFUN([RAK_DISABLE_BACKTRACE], [
+  AC_ARG_ENABLE(backtrace,
+    AC_HELP_STRING([--disable-backtrace], [disable backtrace information [[default=no]]]),
+    [
+        if test "$enableval" = "yes"; then
+            AX_EXECINFO
+        fi
+    ],[
+        AX_EXECINFO
+    ])
+])
diff --git a/src/torrent/exceptions.cc b/src/torrent/exceptions.cc
index 2aeca1d7..f834f9fa 100644
--- a/src/torrent/exceptions.cc
+++ b/src/torrent/exceptions.cc
@@ -42,7 +42,7 @@
 #include <sstream>
 #include <unistd.h>
 
-#ifdef USE_EXECINFO
+#ifdef HAVE_BACKTRACE
 #include <execinfo.h>
 #endif
 
@@ -75,7 +75,7 @@ internal_error::initialize(const std::string& msg) {
 
   std::stringstream output;
 
-#ifdef USE_EXECINFO
+#ifdef HAVE_BACKTRACE
   void* stackPtrs[20];
 
   // Print the stack and exit.
diff --git a/test/Makefile.am b/test/Makefile.am
index b60a86a6..23b260e4 100644
--- a/test/Makefile.am
+++ b/test/Makefile.am
@@ -1,3 +1,5 @@
+SUBDIRS = torrent/net net
+
 TESTS = LibTorrentTest
 AUTOMAKE_OPTIONS = subdir-objects
 
@@ -43,19 +45,9 @@ LibTorrentTest_SOURCES = \
 	data/hash_queue_test.cc \
 	data/hash_queue_test.h \
 	\
-	net/test_socket_listen.cc \
-	net/test_socket_listen.h \
-	\
 	protocol/test_request_list.cc \
 	protocol/test_request_list.h \
 	\
-	torrent/net/test_address_info.cc \
-	torrent/net/test_address_info.h \
-	torrent/net/test_fd.cc \
-	torrent/net/test_fd.h \
-	torrent/net/test_socket_address.cc \
-	torrent/net/test_socket_address.h \
-	\
 	torrent/utils/log_test.cc \
 	torrent/utils/log_test.h \
 	torrent/utils/option_strings_test.cc \
@@ -97,9 +89,10 @@ LibTorrentTest_SOURCES = \
 	torrent/tracker_timeout_test.h \
 	tracker/tracker_http_test.cc \
 	tracker/tracker_http_test.h \
+	\
 	main.cc
 
 LibTorrentTest_CXXFLAGS = $(CPPUNIT_CFLAGS)
-LibTorrentTest_LDFLAGS = $(CPPUNIT_LIBS)  -ldl
+LibTorrentTest_LDFLAGS = $(CPPUNIT_LIBS) -ldl
 
 AM_CPPFLAGS = -I$(srcdir) -I$(top_srcdir) -I$(top_srcdir)/src
diff --git a/test/helpers/expect_fd.h b/test/helpers/expect_fd.h
index 178cbabc..cc77c34a 100644
--- a/test/helpers/expect_fd.h
+++ b/test/helpers/expect_fd.h
@@ -18,15 +18,15 @@ sap_cache_copy_addr_c_ptr(sap_cache_type& sap_cache, const torrent::c_sa_unique_
 
 inline void
 expect_event_open_re(int idx) {
-  mock_expect(&torrent::poll_event_open, mock_compare_map<torrent::Event>::begin_pointer + idx);
-  mock_expect(&torrent::poll_event_insert_read, mock_compare_map<torrent::Event>::begin_pointer + idx);
-  mock_expect(&torrent::poll_event_insert_error, mock_compare_map<torrent::Event>::begin_pointer + idx);
+  mock_expect(&torrent::poll_event_open, mock_compare_map<torrent::Event>::begin_pointer() + idx);
+  mock_expect(&torrent::poll_event_insert_read, mock_compare_map<torrent::Event>::begin_pointer() + idx);
+  mock_expect(&torrent::poll_event_insert_error, mock_compare_map<torrent::Event>::begin_pointer() + idx);
 }
 
 inline void
 expect_event_closed_fd(int idx, int fd) {
   mock_expect(&torrent::fd__close, 0, fd);
-  mock_expect(&torrent::poll_event_closed, mock_compare_map<torrent::Event>::begin_pointer + idx);
+  mock_expect(&torrent::poll_event_closed, mock_compare_map<torrent::Event>::begin_pointer() + idx);
 }
 
 inline void
diff --git a/test/helpers/mock_compare.h b/test/helpers/mock_compare.h
index 3ea90305..3cc8d075 100644
--- a/test/helpers/mock_compare.h
+++ b/test/helpers/mock_compare.h
@@ -34,11 +34,11 @@ template <typename T>
 struct mock_compare_map {
   typedef std::map<const T*, const T*> values_type;
 
-  constexpr static T* begin_pointer = reinterpret_cast<T*>(0x1000);
-  constexpr static T* end_pointer = reinterpret_cast<T*>(0x2000);
+  static T* begin_pointer() { return reinterpret_cast<T*>(0x1000); }
+  static T* end_pointer() { return reinterpret_cast<T*>(0x2000); }
 
   static bool is_key(const T* k) {
-    return k >= begin_pointer && k < end_pointer;
+    return k >= begin_pointer() && k < end_pointer();
   }
 
   static bool has_key(const T* k) {
diff --git a/test/helpers/progress_listener.cc b/test/helpers/progress_listener.cc
index 02803ffc..c2b60bcd 100644
--- a/test/helpers/progress_listener.cc
+++ b/test/helpers/progress_listener.cc
@@ -54,7 +54,8 @@ void
 progress_listener::startSuite(CppUnit::Test *suite) {
   m_test_path.push_back(suite);
 
-  std::cout << std::endl << get_test_path(m_test_path) << suite->getName() << ":" << std::endl;
+  if (suite->countTestCases() > 0)
+    std::cout << std::endl << get_test_path(m_test_path) << suite->getName() << ":" << std::endl;
 }
 
 void
diff --git a/test/main.cc b/test/main.cc
index da93fead..e8a00e1f 100644
--- a/test/main.cc
+++ b/test/main.cc
@@ -12,7 +12,7 @@
 #include <cppunit/extensions/TestFactoryRegistry.h>
 #include <cppunit/ui/text/TestRunner.h>
 
-#ifdef USE_EXECINFO
+#ifdef HAVE_BACKTRACE
 #include <execinfo.h>
 #endif
 
@@ -29,7 +29,7 @@ do_test_panic(int signum) {
 
   std::cout << std::endl << std::endl << "Caught " << strsignal(signum) << ", dumping stack:" << std::endl << std::endl;
   
-#ifdef USE_EXECINFO
+#ifdef HAVE_BACKTRACE
   void* stackPtrs[20];
 
   // Print the stack and exit.
diff --git a/test/net/Makefile.am b/test/net/Makefile.am
new file mode 100644
index 00000000..bb951814
--- /dev/null
+++ b/test/net/Makefile.am
@@ -0,0 +1,40 @@
+TESTS = LibTorrentTestNet
+AUTOMAKE_OPTIONS = subdir-objects
+
+check_PROGRAMS = $(TESTS)
+LibTorrentTestNet_LDADD = \
+	../../src/libtorrent.la \
+	../../src/torrent/libsub_torrent.la \
+	../../src/torrent/data/libsub_torrentdata.la \
+	../../src/torrent/download/libsub_torrentdownload.la \
+	../../src/torrent/peer/libsub_torrentpeer.la \
+	../../src/data/libsub_data.la \
+	../../src/dht/libsub_dht.la \
+	../../src/net/libsub_net.la \
+	../../src/protocol/libsub_protocol.la \
+	../../src/download/libsub_download.la \
+	../../src/tracker/libsub_tracker.la \
+	../../src/utils/libsub_utils.la \
+	../../src/torrent/utils/libsub_torrentutils.la
+
+LibTorrentTestNet_SOURCES = \
+	../helpers/expect_fd.h \
+	../helpers/expect_utils.h \
+	../helpers/mock_compare.h \
+	../helpers/mock_function.cc \
+	../helpers/mock_function.h \
+	../helpers/network.h \
+	../helpers/progress_listener.cc \
+	../helpers/progress_listener.h \
+	../helpers/test_fixture.cc \
+	../helpers/test_fixture.h \
+	\
+	test_socket_listen.cc \
+	test_socket_listen.h \
+	\
+	../main.cc
+
+LibTorrentTestNet_CXXFLAGS = $(CPPUNIT_CFLAGS)
+LibTorrentTestNet_LDFLAGS = $(CPPUNIT_LIBS) -ldl
+
+AM_CPPFLAGS = -I$(top_srcdir) -I$(top_srcdir)/src -I$(top_srcdir)/test
diff --git a/test/torrent/net/Makefile.am b/test/torrent/net/Makefile.am
new file mode 100644
index 00000000..8a531cc1
--- /dev/null
+++ b/test/torrent/net/Makefile.am
@@ -0,0 +1,44 @@
+TESTS = LibTorrentTestTorrentNet
+AUTOMAKE_OPTIONS = subdir-objects
+
+check_PROGRAMS = $(TESTS)
+LibTorrentTestTorrentNet_LDADD = \
+	../../../src/libtorrent.la \
+	../../../src/torrent/libsub_torrent.la \
+	../../../src/torrent/data/libsub_torrentdata.la \
+	../../../src/torrent/download/libsub_torrentdownload.la \
+	../../../src/torrent/peer/libsub_torrentpeer.la \
+	../../../src/data/libsub_data.la \
+	../../../src/dht/libsub_dht.la \
+	../../../src/net/libsub_net.la \
+	../../../src/protocol/libsub_protocol.la \
+	../../../src/download/libsub_download.la \
+	../../../src/tracker/libsub_tracker.la \
+	../../../src/utils/libsub_utils.la \
+	../../../src/torrent/utils/libsub_torrentutils.la
+
+LibTorrentTestTorrentNet_SOURCES = \
+	../../helpers/expect_fd.h \
+	../../helpers/expect_utils.h \
+	../../helpers/mock_compare.h \
+	../../helpers/mock_function.cc \
+	../../helpers/mock_function.h \
+	../../helpers/network.h \
+	../../helpers/progress_listener.cc \
+	../../helpers/progress_listener.h \
+	../../helpers/test_fixture.cc \
+	../../helpers/test_fixture.h \
+	\
+	test_address_info.cc \
+	test_address_info.h \
+	test_fd.cc \
+	test_fd.h \
+	test_socket_address.cc \
+	test_socket_address.h \
+	\
+	../../main.cc
+
+LibTorrentTestTorrentNet_CXXFLAGS = $(CPPUNIT_CFLAGS)
+LibTorrentTestTorrentNet_LDFLAGS = $(CPPUNIT_LIBS) -ldl
+
+AM_CPPFLAGS = -I$(top_srcdir) -I$(top_srcdir)/src -I$(top_srcdir)/test
diff --git a/test/torrent/net/test_fd.cc b/test/torrent/net/test_fd.cc
index 3cab0c5e..5e56f0f3 100644
--- a/test/torrent/net/test_fd.cc
+++ b/test/torrent/net/test_fd.cc
@@ -1,24 +1,24 @@
-#include "config.h"
-
-#include "test_fd.h"
-
-#include <torrent/net/fd.h>
-
-CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(test_fd, "torrent/net");
-
-void
-test_fd::test_valid_flags() {
-  CPPUNIT_ASSERT(torrent::fd_valid_flags(torrent::fd_flag_stream));
-  CPPUNIT_ASSERT(torrent::fd_valid_flags(torrent::fd_flag_stream | torrent::fd_flag_nonblock));
-  CPPUNIT_ASSERT(torrent::fd_valid_flags(torrent::fd_flag_stream | torrent::fd_flag_reuse_address));
-  CPPUNIT_ASSERT(torrent::fd_valid_flags(torrent::fd_flag_stream | torrent::fd_flag_v4only));
-  CPPUNIT_ASSERT(torrent::fd_valid_flags(torrent::fd_flag_stream | torrent::fd_flag_v6only));
-
-  CPPUNIT_ASSERT(!torrent::fd_valid_flags(torrent::fd_flag_v4only | torrent::fd_flag_v6only));
-  CPPUNIT_ASSERT(!torrent::fd_valid_flags(torrent::fd_flag_stream | torrent::fd_flag_v4only | torrent::fd_flag_v6only));
-
-  CPPUNIT_ASSERT(!torrent::fd_valid_flags(torrent::fd_flags()));
-  CPPUNIT_ASSERT(!torrent::fd_valid_flags(torrent::fd_flags(~torrent::fd_flag_all)));
-  CPPUNIT_ASSERT(!torrent::fd_valid_flags(torrent::fd_flags(torrent::fd_flag_stream | ~torrent::fd_flag_all)));
-  CPPUNIT_ASSERT(!torrent::fd_valid_flags(torrent::fd_flags(0x3245132)));
-}
+#include "config.h"
+
+#include "test_fd.h"
+
+#include <torrent/net/fd.h>
+
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(test_fd, "torrent/net");
+
+void
+test_fd::test_valid_flags() {
+  CPPUNIT_ASSERT(torrent::fd_valid_flags(torrent::fd_flag_stream));
+  CPPUNIT_ASSERT(torrent::fd_valid_flags(torrent::fd_flag_stream | torrent::fd_flag_nonblock));
+  CPPUNIT_ASSERT(torrent::fd_valid_flags(torrent::fd_flag_stream | torrent::fd_flag_reuse_address));
+  CPPUNIT_ASSERT(torrent::fd_valid_flags(torrent::fd_flag_stream | torrent::fd_flag_v4only));
+  CPPUNIT_ASSERT(torrent::fd_valid_flags(torrent::fd_flag_stream | torrent::fd_flag_v6only));
+
+  CPPUNIT_ASSERT(!torrent::fd_valid_flags(torrent::fd_flag_v4only | torrent::fd_flag_v6only));
+  CPPUNIT_ASSERT(!torrent::fd_valid_flags(torrent::fd_flag_stream | torrent::fd_flag_v4only | torrent::fd_flag_v6only));
+
+  CPPUNIT_ASSERT(!torrent::fd_valid_flags(torrent::fd_flags()));
+  CPPUNIT_ASSERT(!torrent::fd_valid_flags(torrent::fd_flags(~torrent::fd_flag_all)));
+  CPPUNIT_ASSERT(!torrent::fd_valid_flags(torrent::fd_flags(torrent::fd_flag_stream | ~torrent::fd_flag_all)));
+  CPPUNIT_ASSERT(!torrent::fd_valid_flags(torrent::fd_flags(0x3245132)));
+}
