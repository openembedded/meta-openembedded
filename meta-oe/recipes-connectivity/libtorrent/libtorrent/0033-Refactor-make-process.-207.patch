From 9cdb950c0db2bad1a4d85b48f06419e2920aa114 Mon Sep 17 00:00:00 2001
From: Jari Sundell <sundell.software@gmail.com>
Date: Fri, 20 Dec 2019 00:37:38 +0900
Subject: [PATCH] Refactor make process. (#207)

---
 configure.ac                                  |   3 +-
 src/Makefile.am                               |   3 +-
 src/manager.h                                 |  36 ---
 src/thread_disk.h                             |  51 +---
 src/torrent/utils/thread_base.cc              |  36 ---
 src/torrent/utils/thread_base.h               |  48 +---
 test/Makefile.am                              | 140 +++++------
 ...{chunk_list_test.cc => test_chunk_list.cc} |  16 +-
 .../{chunk_list_test.h => test_chunk_list.h}  |  13 +-
 ...queue_test.cc => test_hash_check_queue.cc} |  33 ++-
 ...k_queue_test.h => test_hash_check_queue.h} |  22 +-
 ...{hash_queue_test.cc => test_hash_queue.cc} |  66 +++---
 .../{hash_queue_test.h => test_hash_queue.h}  |  11 +-
 test/helpers/progress_listener.cc             |   4 +-
 test/helpers/test_fixture.h                   |  28 +--
 test/helpers/test_thread.cc                   |  71 ++++++
 test/helpers/test_thread.h                    |  59 +++++
 test/helpers/test_utils.h                     |  16 ++
 test/helpers/utils.h                          | 120 +++++-----
 test/main.cc                                  |   4 +-
 test/torrent/{http_test.cc => test_http.cc}   |  17 +-
 test/torrent/{http_test.h => test_http.h}     |  11 +-
 test/torrent/utils/option_strings_test.h      |  17 --
 test/torrent/utils/signal_bitfield_test.h     |  23 --
 test/torrent/utils/test_extents.cc            |  63 ++---
 test/torrent/utils/test_extents.h             |   9 +-
 .../utils/{log_test.cc => test_log.cc}        |  26 +-
 test/torrent/utils/{log_test.h => test_log.h} |   8 +-
 test/torrent/utils/test_log_buffer.cc         |  11 +-
 test/torrent/utils/test_log_buffer.h          |   5 -
 ...strings_test.cc => test_option_strings.cc} |  29 +--
 test/torrent/utils/test_option_strings.h      |  10 +
 test/torrent/utils/test_queue_buckets.cc      |  12 +-
 test/torrent/utils/test_queue_buckets.h       |  11 +-
 ...tfield_test.cc => test_signal_bitfield.cc} |  31 ++-
 test/torrent/utils/test_signal_bitfield.h     |  22 ++
 test/torrent/utils/test_thread_base.cc        | 169 +++++++++++++
 test/torrent/utils/test_thread_base.h         |  25 ++
 test/torrent/utils/test_uri_parser.cc         |  31 +--
 test/torrent/utils/test_uri_parser.h          |  11 +-
 test/torrent/utils/thread_base_test.cc        | 224 ------------------
 test/torrent/utils/thread_base_test.h         |  86 -------
 test/tracker/test_tracker_http.cc             |  11 +
 test/tracker/test_tracker_http.h              |  12 +
 test/tracker/tracker_http_test.cc             |  17 --
 test/tracker/tracker_http_test.h              |  18 --
 46 files changed, 735 insertions(+), 954 deletions(-)
 rename test/data/{chunk_list_test.cc => test_chunk_list.cc} (93%)
 rename test/data/{chunk_list_test.h => test_chunk_list.h} (88%)
 rename test/data/{hash_check_queue_test.cc => test_hash_check_queue.cc} (92%)
 rename test/data/{hash_check_queue_test.h => test_hash_check_queue.h} (63%)
 rename test/data/{hash_queue_test.cc => test_hash_queue.cc} (82%)
 rename test/data/{hash_queue_test.h => test_hash_queue.h} (58%)
 create mode 100755 test/helpers/test_thread.cc
 create mode 100755 test/helpers/test_thread.h
 create mode 100644 test/helpers/test_utils.h
 rename test/torrent/{http_test.cc => test_http.cc} (94%)
 rename test/torrent/{http_test.h => test_http.h} (63%)
 delete mode 100644 test/torrent/utils/option_strings_test.h
 delete mode 100644 test/torrent/utils/signal_bitfield_test.h
 rename test/torrent/utils/{log_test.cc => test_log.cc} (92%)
 rename test/torrent/utils/{log_test.h => test_log.h} (71%)
 rename test/torrent/utils/{option_strings_test.cc => test_option_strings.cc} (65%)
 create mode 100644 test/torrent/utils/test_option_strings.h
 rename test/torrent/utils/{signal_bitfield_test.cc => test_signal_bitfield.cc} (85%)
 create mode 100644 test/torrent/utils/test_signal_bitfield.h
 create mode 100644 test/torrent/utils/test_thread_base.cc
 create mode 100644 test/torrent/utils/test_thread_base.h
 delete mode 100644 test/torrent/utils/thread_base_test.cc
 delete mode 100644 test/torrent/utils/thread_base_test.h
 create mode 100644 test/tracker/test_tracker_http.cc
 create mode 100644 test/tracker/test_tracker_http.h
 delete mode 100644 test/tracker/tracker_http_test.cc
 delete mode 100644 test/tracker/tracker_http_test.h

diff --git a/configure.ac b/configure.ac
index e83710cc..88a46edd 100644
--- a/configure.ac
+++ b/configure.ac
@@ -21,6 +21,7 @@ AM_INIT_AUTOMAKE([serial-tests subdir-objects])
 AC_CONFIG_HEADERS(config.h)
 
 AC_PROG_CXX
+AC_SYS_LARGEFILE
 
 AC_C_BIGENDIAN(
     AC_DEFINE(IS_BIG_ENDIAN, 1, Big endian),
@@ -37,8 +38,6 @@ RAK_DISABLE_BACKTRACE
 
 RAK_CHECK_CXX11
 
-AC_SYS_LARGEFILE
-
 TORRENT_ENABLE_ALIGNED
 TORRENT_ENABLE_INTERRUPT_SOCKET
 
diff --git a/src/Makefile.am b/src/Makefile.am
index e96bd74b..95e6a7ae 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -1,7 +1,8 @@
 SUBDIRS = torrent
 
 lib_LTLIBRARIES = libtorrent.la
-noinst_LTLIBRARIES = libtorrent_other.la
+noinst_LTLIBRARIES = \
+	libtorrent_other.la
 
 libtorrent_la_LDFLAGS = -version-info $(LIBTORRENT_INTERFACE_VERSION_INFO)
 libtorrent_la_LIBADD = \
diff --git a/src/manager.h b/src/manager.h
index 1db81e9b..1ada9567 100644
--- a/src/manager.h
+++ b/src/manager.h
@@ -1,39 +1,3 @@
-// libTorrent - BitTorrent library
-// Copyright (C) 2005-2011, Jari Sundell
-//
-// This program is free software; you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation; either version 2 of the License, or
-// (at your option) any later version.
-// 
-// This program is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-// 
-// You should have received a copy of the GNU General Public License
-// along with this program; if not, write to the Free Software
-// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-//
-// In addition, as a special exception, the copyright holders give
-// permission to link the code of portions of this program with the
-// OpenSSL library under certain conditions as described in each
-// individual source file, and distribute linked combinations
-// including the two.
-//
-// You must obey the GNU General Public License in all respects for
-// all of the code used other than OpenSSL.  If you modify file(s)
-// with this exception, you may extend this exception to your version
-// of the file(s), but you are not obligated to do so.  If you do not
-// wish to do so, delete this exception statement from your version.
-// If you delete this exception statement from all source files in the
-// program, then also delete it here.
-//
-// Contact:  Jari Sundell <jaris@ifi.uio.no>
-//
-//           Skomakerveien 33
-//           3185 Skoppum, NORWAY
-
 #ifndef LIBTORRENT_MANAGER_H
 #define LIBTORRENT_MANAGER_H
 
diff --git a/src/thread_disk.h b/src/thread_disk.h
index fa1fcb7e..7b378915 100644
--- a/src/thread_disk.h
+++ b/src/thread_disk.h
@@ -1,39 +1,3 @@
-// libTorrent - BitTorrent library
-// Copyright (C) 2005-2011, Jari Sundell
-//
-// This program is free software; you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation; either version 2 of the License, or
-// (at your option) any later version.
-// 
-// This program is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-// 
-// You should have received a copy of the GNU General Public License
-// along with this program; if not, write to the Free Software
-// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-//
-// In addition, as a special exception, the copyright holders give
-// permission to link the code of portions of this program with the
-// OpenSSL library under certain conditions as described in each
-// individual source file, and distribute linked combinations
-// including the two.
-//
-// You must obey the GNU General Public License in all respects for
-// all of the code used other than OpenSSL.  If you modify file(s)
-// with this exception, you may extend this exception to your version
-// of the file(s), but you are not obligated to do so.  If you do not
-// wish to do so, delete this exception statement from your version.
-// If you delete this exception statement from all source files in the
-// program, then also delete it here.
-//
-// Contact:  Jari Sundell <jaris@ifi.uio.no>
-//
-//           Skomakerveien 33
-//           3185 Skoppum, NORWAY
-
 #ifndef LIBTORRENT_THREAD_DISK_H
 #define LIBTORRENT_THREAD_DISK_H
 
@@ -42,19 +6,18 @@
 
 namespace torrent {
 
-class thread_disk : public thread_base {
+class LIBTORRENT_EXPORT thread_disk : public thread_base {
 public:
-  const char*         name() const { return "rtorrent disk"; }
-
-  virtual void        init_thread();
+  const char*     name() const { return "rtorrent disk"; }
+  HashCheckQueue* hash_queue() { return &m_hash_queue; }
 
-  HashCheckQueue*     hash_queue() { return &m_hash_queue; }
+  virtual void    init_thread();
 
 protected:
-  virtual void        call_events();
-  virtual int64_t     next_timeout_usec();
+  virtual void    call_events();
+  virtual int64_t next_timeout_usec();
 
-  HashCheckQueue      m_hash_queue;
+  HashCheckQueue  m_hash_queue;
 };
 
 }
diff --git a/src/torrent/utils/thread_base.cc b/src/torrent/utils/thread_base.cc
index 778e4c38..99d6355d 100644
--- a/src/torrent/utils/thread_base.cc
+++ b/src/torrent/utils/thread_base.cc
@@ -1,39 +1,3 @@
-// libTorrent - BitTorrent library
-// Copyright (C) 2005-2011, Jari Sundell
-//
-// This program is free software; you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation; either version 2 of the License, or
-// (at your option) any later version.
-// 
-// This program is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-// 
-// You should have received a copy of the GNU General Public License
-// along with this program; if not, write to the Free Software
-// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-//
-// In addition, as a special exception, the copyright holders give
-// permission to link the code of portions of this program with the
-// OpenSSL library under certain conditions as described in each
-// individual source file, and distribute linked combinations
-// including the two.
-//
-// You must obey the GNU General Public License in all respects for
-// all of the code used other than OpenSSL.  If you modify file(s)
-// with this exception, you may extend this exception to your version
-// of the file(s), but you are not obligated to do so.  If you do not
-// wish to do so, delete this exception statement from your version.
-// If you delete this exception statement from all source files in the
-// program, then also delete it here.
-//
-// Contact:  Jari Sundell <jaris@ifi.uio.no>
-//
-//           Skomakerveien 33
-//           3185 Skoppum, NORWAY
-
 #include "config.h"
 
 #include <cstring>
diff --git a/src/torrent/utils/thread_base.h b/src/torrent/utils/thread_base.h
index b92a98ba..bead9659 100644
--- a/src/torrent/utils/thread_base.h
+++ b/src/torrent/utils/thread_base.h
@@ -1,48 +1,12 @@
-// libTorrent - BitTorrent library
-// Copyright (C) 2005-2011, Jari Sundell
-//
-// This program is free software; you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation; either version 2 of the License, or
-// (at your option) any later version.
-// 
-// This program is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-// 
-// You should have received a copy of the GNU General Public License
-// along with this program; if not, write to the Free Software
-// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-//
-// In addition, as a special exception, the copyright holders give
-// permission to link the code of portions of this program with the
-// OpenSSL library under certain conditions as described in each
-// individual source file, and distribute linked combinations
-// including the two.
-//
-// You must obey the GNU General Public License in all respects for
-// all of the code used other than OpenSSL.  If you modify file(s)
-// with this exception, you may extend this exception to your version
-// of the file(s), but you are not obligated to do so.  If you do not
-// wish to do so, delete this exception statement from your version.
-// If you delete this exception statement from all source files in the
-// program, then also delete it here.
-//
-// Contact:  Jari Sundell <jaris@ifi.uio.no>
-//
-//           Skomakerveien 33
-//           3185 Skoppum, NORWAY
-
 #ifndef LIBTORRENT_UTILS_THREAD_BASE_H
 #define LIBTORRENT_UTILS_THREAD_BASE_H
 
-#include <functional>
-#include <pthread.h>
-#include <sys/types.h>
+#import <functional>
+#import <pthread.h>
+#import <sys/types.h>
 
-#include <torrent/common.h>
-#include <torrent/utils/signal_bitfield.h>
+#import <torrent/common.h>
+#import <torrent/utils/signal_bitfield.h>
 
 namespace torrent {
 
@@ -54,7 +18,7 @@ public:
   typedef void* (*pthread_func)(void*);
   typedef std::function<void ()>     slot_void;
   typedef std::function<uint64_t ()> slot_timer;
-  typedef class signal_bitfield           signal_type;
+  typedef class signal_bitfield      signal_type;
 
   enum state_type {
     STATE_UNKNOWN,
diff --git a/test/Makefile.am b/test/Makefile.am
index 8b0291bb..cb00dce3 100644
--- a/test/Makefile.am
+++ b/test/Makefile.am
@@ -1,6 +1,10 @@
 TESTS = \
 	LibTorrent_Test_Torrent_Net \
+	LibTorrent_Test_Torrent_Utils \
+	LibTorrent_Test_Torrent \
+	LibTorrent_Test_Data \
 	LibTorrent_Test_Net \
+	LibTorrent_Test_Tracker \
 	LibTorrent_Test
 
 check_PROGRAMS = $(TESTS)
@@ -10,22 +14,14 @@ LibTorrent_Test_LDADD = \
 	../src/libtorrent_other.la \
 	../src/torrent/libtorrent_torrent.la
 
-LibTorrent_Test_Net_LDADD = $(LibTorrent_Test_LDADD)
 LibTorrent_Test_Torrent_Net_LDADD = $(LibTorrent_Test_LDADD)
+LibTorrent_Test_Torrent_Utils_LDADD = $(LibTorrent_Test_LDADD)
+LibTorrent_Test_Torrent_LDADD = $(LibTorrent_Test_LDADD)
+LibTorrent_Test_Data_LDADD = $(LibTorrent_Test_LDADD)
+LibTorrent_Test_Net_LDADD = $(LibTorrent_Test_LDADD)
+LibTorrent_Test_Tracker_LDADD = $(LibTorrent_Test_LDADD)
 
-# LibTorrent_Test_SOURCES = \
-# 	helpers/expect_fd.h \
-# 	helpers/expect_utils.h \
-# 	helpers/mock_compare.h \
-# 	helpers/mock_function.cc \
-# 	helpers/mock_function.h \
-# 	helpers/network.h \
-# 	helpers/progress_listener.cc \
-# 	helpers/progress_listener.h \
-# 	helpers/test_fixture.cc \
-# 	helpers/test_fixture.h
-
-LibTorrent_Test_Torrent_Net_SOURCES = \
+LibTorrent_Test_Common = \
 	main.cc \
 	helpers/expect_fd.h \
 	helpers/expect_utils.h \
@@ -37,7 +33,10 @@ LibTorrent_Test_Torrent_Net_SOURCES = \
 	helpers/progress_listener.h \
 	helpers/test_fixture.cc \
 	helpers/test_fixture.h \
-	\
+	helpers/test_thread.cc \
+	helpers/test_thread.h
+
+LibTorrent_Test_Torrent_Net_SOURCES = $(LibTorrent_Test_Common) \
 	torrent/net/test_address_info.cc \
 	torrent/net/test_address_info.h \
 	torrent/net/test_fd.cc \
@@ -45,71 +44,28 @@ LibTorrent_Test_Torrent_Net_SOURCES = \
 	torrent/net/test_socket_address.cc \
 	torrent/net/test_socket_address.h
 
-LibTorrent_Test_Net_SOURCES = \
-	main.cc \
-	helpers/expect_fd.h \
-	helpers/expect_utils.h \
-	helpers/mock_compare.h \
-	helpers/mock_function.cc \
-	helpers/mock_function.h \
-	helpers/network.h \
-	helpers/progress_listener.cc \
-	helpers/progress_listener.h \
-	helpers/test_fixture.cc \
-	helpers/test_fixture.h \
-	\
-	net/test_socket_listen.cc \
-	net/test_socket_listen.h
-
-LibTorrent_Test_SOURCES = \
-	main.cc \
-	helpers/expect_fd.h \
-	helpers/expect_utils.h \
-	helpers/mock_compare.h \
-	helpers/mock_function.cc \
-	helpers/mock_function.h \
-	helpers/network.h \
-	helpers/progress_listener.cc \
-	helpers/progress_listener.h \
-	helpers/test_fixture.cc \
-	helpers/test_fixture.h \
-	\
-	../src/thread_disk.cc \
-	../src/thread_disk.h \
-	\
-	rak/allocators_test.cc \
-	rak/allocators_test.h \
-	rak/ranges_test.cc \
-	rak/ranges_test.h \
-	data/chunk_list_test.cc \
-	data/chunk_list_test.h \
-	data/hash_check_queue_test.cc \
-	data/hash_check_queue_test.h \
-	data/hash_queue_test.cc \
-	data/hash_queue_test.h \
-	\
-	protocol/test_request_list.cc \
-	protocol/test_request_list.h \
-	\
-	torrent/utils/log_test.cc \
-	torrent/utils/log_test.h \
-	torrent/utils/option_strings_test.cc \
-	torrent/utils/option_strings_test.h \
+LibTorrent_Test_Torrent_Utils_SOURCES = $(LibTorrent_Test_Common) \
 	torrent/utils/test_extents.cc \
 	torrent/utils/test_extents.h \
+	torrent/utils/test_log.cc \
+	torrent/utils/test_log.h \
 	torrent/utils/test_log_buffer.cc \
 	torrent/utils/test_log_buffer.h \
+	torrent/utils/test_option_strings.cc \
+	torrent/utils/test_option_strings.h \
 	torrent/utils/test_queue_buckets.cc \
 	torrent/utils/test_queue_buckets.h \
+	torrent/utils/test_signal_bitfield.cc \
+	torrent/utils/test_signal_bitfield.h \
+	torrent/utils/test_thread_base.cc \
+	torrent/utils/test_thread_base.h \
 	torrent/utils/test_uri_parser.cc \
-	torrent/utils/test_uri_parser.h \
-	torrent/utils/signal_bitfield_test.cc \
-	torrent/utils/signal_bitfield_test.h \
-	torrent/utils/thread_base_test.cc \
-	torrent/utils/thread_base_test.h \
+	torrent/utils/test_uri_parser.h
+
+LibTorrent_Test_Torrent_SOURCES = $(LibTorrent_Test_Common) \
+	torrent/test_http.cc \
+	torrent/test_http.h \
 	\
-	torrent/http_test.cc \
-	torrent/http_test.h \
 	torrent/object_test.cc \
 	torrent/object_test.h \
 	torrent/object_test_utils.cc \
@@ -129,15 +85,49 @@ LibTorrent_Test_SOURCES = \
 	torrent/tracker_list_features_test.cc \
 	torrent/tracker_list_features_test.h \
 	torrent/tracker_timeout_test.cc \
-	torrent/tracker_timeout_test.h \
+	torrent/tracker_timeout_test.h
+
+LibTorrent_Test_Data_SOURCES = $(LibTorrent_Test_Common) \
+	data/test_chunk_list.cc \
+	data/test_chunk_list.h \
+	data/test_hash_check_queue.cc \
+	data/test_hash_check_queue.h \
+	data/test_hash_queue.cc \
+	data/test_hash_queue.h
+
+LibTorrent_Test_Net_SOURCES = $(LibTorrent_Test_Common) \
+	net/test_socket_listen.cc \
+	net/test_socket_listen.h
+
+LibTorrent_Test_Tracker_SOURCES = $(LibTorrent_Test_Common) \
+	tracker/test_tracker_http.cc \
+	tracker/test_tracker_http.h
+
+LibTorrent_Test_SOURCES = $(LibTorrent_Test_Common) \
+	\
+	../src/thread_disk.cc \
+	../src/thread_disk.h \
 	\
-	tracker/tracker_http_test.cc \
-	tracker/tracker_http_test.h
+	rak/allocators_test.cc \
+	rak/allocators_test.h \
+	rak/ranges_test.cc \
+	rak/ranges_test.h \
+	\
+	protocol/test_request_list.cc \
+	protocol/test_request_list.h
 
 LibTorrent_Test_Torrent_Net_CXXFLAGS = $(CPPUNIT_CFLAGS)
 LibTorrent_Test_Torrent_Net_LDFLAGS = $(CPPUNIT_LIBS) -ldl
+LibTorrent_Test_Torrent_Utils_CXXFLAGS = $(CPPUNIT_CFLAGS)
+LibTorrent_Test_Torrent_Utils_LDFLAGS = $(CPPUNIT_LIBS) -ldl
+LibTorrent_Test_Torrent_CXXFLAGS = $(CPPUNIT_CFLAGS)
+LibTorrent_Test_Torrent_LDFLAGS = $(CPPUNIT_LIBS) -ldl
+LibTorrent_Test_Data_CXXFLAGS = $(CPPUNIT_CFLAGS)
+LibTorrent_Test_Data_LDFLAGS = $(CPPUNIT_LIBS) -ldl
 LibTorrent_Test_Net_CXXFLAGS = $(CPPUNIT_CFLAGS)
 LibTorrent_Test_Net_LDFLAGS = $(CPPUNIT_LIBS) -ldl
+LibTorrent_Test_Tracker_CXXFLAGS = $(CPPUNIT_CFLAGS)
+LibTorrent_Test_Tracker_LDFLAGS = $(CPPUNIT_LIBS) -ldl
 LibTorrent_Test_CXXFLAGS = $(CPPUNIT_CFLAGS)
 LibTorrent_Test_LDFLAGS = $(CPPUNIT_LIBS) -ldl
 
diff --git a/test/data/chunk_list_test.cc b/test/data/test_chunk_list.cc
similarity index 93%
rename from test/data/chunk_list_test.cc
rename to test/data/test_chunk_list.cc
index 28647db2..18de597e 100644
--- a/test/data/chunk_list_test.cc
+++ b/test/data/test_chunk_list.cc
@@ -1,11 +1,11 @@
-#include "config.h"
+#import "config.h"
 
-#include "chunk_list_test.h"
+#import "test_chunk_list.h"
 
-#include "torrent/chunk_manager.h"
-#include "torrent/exceptions.h"
+#import "torrent/chunk_manager.h"
+#import "torrent/exceptions.h"
 
-CPPUNIT_TEST_SUITE_REGISTRATION(ChunkListTest);
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(test_chunk_list, "data");
 
 torrent::Chunk*
 func_create_chunk(uint32_t index, int prot_flags) {
@@ -36,7 +36,7 @@ func_storage_error(torrent::ChunkList* chunk_list, const std::string& message) {
 }
 
 void
-ChunkListTest::test_basic() {
+test_chunk_list::test_basic() {
   torrent::ChunkManager chunk_manager;
   torrent::ChunkList chunk_list;
 
@@ -55,7 +55,7 @@ ChunkListTest::test_basic() {
 }
 
 void
-ChunkListTest::test_get_release() {
+test_chunk_list::test_get_release() {
   SETUP_CHUNK_LIST();
 
   CPPUNIT_ASSERT(!(*chunk_list)[0].is_valid());
@@ -112,7 +112,7 @@ ChunkListTest::test_get_release() {
 
 // Make sure we can't go into writable when blocking, etc.
 void
-ChunkListTest::test_blocking() {
+test_chunk_list::test_blocking() {
   SETUP_CHUNK_LIST();
 
   torrent::ChunkHandle handle_0_ro = chunk_list->get(0, torrent::ChunkList::get_blocking);
diff --git a/test/data/chunk_list_test.h b/test/data/test_chunk_list.h
similarity index 88%
rename from test/data/chunk_list_test.h
rename to test/data/test_chunk_list.h
index 3979982f..85d1f77b 100644
--- a/test/data/chunk_list_test.h
+++ b/test/data/test_chunk_list.h
@@ -1,23 +1,22 @@
-#include <cppunit/extensions/HelperMacros.h>
+#import "helpers/test_fixture.h"
 
-#include "data/chunk_list.h"
+class test_chunk_list : public test_fixture {
+  CPPUNIT_TEST_SUITE(test_chunk_list);
 
-class ChunkListTest : public CppUnit::TestFixture {
-  CPPUNIT_TEST_SUITE(ChunkListTest);
   CPPUNIT_TEST(test_basic);
   CPPUNIT_TEST(test_get_release);
   CPPUNIT_TEST(test_blocking);
+
   CPPUNIT_TEST_SUITE_END();
 
 public:
-  void setUp() {}
-  void tearDown() {}
-
   void test_basic();
   void test_get_release();
   void test_blocking();
 };
 
+#include "data/chunk_list.h"
+
 torrent::Chunk* func_create_chunk(uint32_t index, int prot_flags);
 uint64_t        func_free_diskspace(torrent::ChunkList* chunk_list);
 void            func_storage_error(torrent::ChunkList* chunk_list, const std::string& message);
diff --git a/test/data/hash_check_queue_test.cc b/test/data/test_hash_check_queue.cc
similarity index 92%
rename from test/data/hash_check_queue_test.cc
rename to test/data/test_hash_check_queue.cc
index 4b15245e..65931273 100644
--- a/test/data/hash_check_queue_test.cc
+++ b/test/data/test_hash_check_queue.cc
@@ -1,20 +1,23 @@
 #include "config.h"
 
+#include "test_hash_check_queue.h"
+
+#include "helpers/test_thread.h"
+#include "helpers/test_utils.h"
+
 #include <functional>
 #include <signal.h>
 
-#include "data/hash_queue_node.h"
+#include "data/chunk_handle.h"
 #include "utils/sha1.h"
 #include "torrent/chunk_manager.h"
 #include "torrent/exceptions.h"
 #include "torrent/poll_select.h"
-#include "torrent/utils/thread_base_test.h"
 #include "thread_disk.h"
 
-#include "chunk_list_test.h"
-#include "hash_check_queue_test.h"
+#include "test_chunk_list.h"
 
-CPPUNIT_TEST_SUITE_REGISTRATION(HashCheckQueueTest);
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(test_hash_check_queue, "data");
 
 pthread_mutex_t done_chunks_lock = PTHREAD_MUTEX_INITIALIZER;
 
@@ -68,22 +71,16 @@ static torrent::Poll* create_select_poll() { return torrent::PollSelect::create(
 static void do_nothing() {}
 
 void
-HashCheckQueueTest::setUp() {
+test_hash_check_queue::setUp() {
+  test_fixture::setUp();
+
   torrent::Poll::slot_create_poll() = std::bind(&create_select_poll);
 
   signal(SIGUSR1, (sig_t)&do_nothing);
 }
 
 void
-HashCheckQueueTest::tearDown() {
-}
-
-void
-HashCheckQueueTest::test_basic() {
-}
-
-void
-HashCheckQueueTest::test_single() {
+test_hash_check_queue::test_single() {
   SETUP_CHUNK_LIST();
   torrent::HashCheckQueue hash_queue;
 
@@ -110,7 +107,7 @@ HashCheckQueueTest::test_single() {
 }
 
 void
-HashCheckQueueTest::test_multiple() {
+test_hash_check_queue::test_multiple() {
   SETUP_CHUNK_LIST();
   torrent::HashCheckQueue hash_queue;
 
@@ -143,7 +140,7 @@ HashCheckQueueTest::test_multiple() {
 }
 
 void
-HashCheckQueueTest::test_erase() {
+test_hash_check_queue::test_erase() {
   // SETUP_CHUNK_LIST();
   // torrent::HashCheckQueue hash_queue;
 
@@ -176,7 +173,7 @@ HashCheckQueueTest::test_erase() {
 }
 
 void
-HashCheckQueueTest::test_thread() {
+test_hash_check_queue::test_thread() {
   SETUP_CHUNK_LIST();
   SETUP_THREAD();
   thread_disk->start_thread();
diff --git a/test/data/hash_check_queue_test.h b/test/data/test_hash_check_queue.h
similarity index 63%
rename from test/data/hash_check_queue_test.h
rename to test/data/test_hash_check_queue.h
index 5398a50d..d2d271bb 100644
--- a/test/data/hash_check_queue_test.h
+++ b/test/data/test_hash_check_queue.h
@@ -1,26 +1,19 @@
-#include <map>
-#include <vector>
-#include <cppunit/extensions/HelperMacros.h>
+#import "helpers/test_fixture.h"
 
-#include "data/hash_check_queue.h"
-#include "torrent/hash_string.h"
+class test_hash_check_queue : public test_fixture {
+  CPPUNIT_TEST_SUITE(test_hash_check_queue);
 
-
-class HashCheckQueueTest : public CppUnit::TestFixture {
-  CPPUNIT_TEST_SUITE(HashCheckQueueTest);
-  CPPUNIT_TEST(test_basic);
   CPPUNIT_TEST(test_single);
   CPPUNIT_TEST(test_multiple);
   CPPUNIT_TEST(test_erase);
 
   CPPUNIT_TEST(test_thread);
+
   CPPUNIT_TEST_SUITE_END();
 
 public:
   void setUp();
-  void tearDown();
 
-  void test_basic();
   void test_single();
   void test_multiple();
   void test_erase();
@@ -28,6 +21,13 @@ public:
   void test_thread();
 };
 
+#import <map>
+#import <vector>
+
+#import "data/hash_queue_node.h"
+#import "data/hash_check_queue.h"
+#import "torrent/hash_string.h"
+
 typedef std::map<int, torrent::HashString> done_chunks_type;
 typedef std::vector<torrent::ChunkHandle> handle_list;
 
diff --git a/test/data/hash_queue_test.cc b/test/data/test_hash_queue.cc
similarity index 82%
rename from test/data/hash_queue_test.cc
rename to test/data/test_hash_queue.cc
index d7ce3ba8..d9a88c8d 100644
--- a/test/data/hash_queue_test.cc
+++ b/test/data/test_hash_queue.cc
@@ -1,22 +1,26 @@
-#include "config.h"
+#import "config.h"
 
-#include <functional>
-#include <signal.h>
+#import "test_hash_queue.h"
 
-#include "data/hash_queue_node.h"
-#include "torrent/chunk_manager.h"
-#include "torrent/exceptions.h"
-#include "torrent/hash_string.h"
-#include "torrent/poll_select.h"
-#include "torrent/utils/thread_base_test.h"
-#include "globals.h"
-#include "thread_disk.h"
+#import "helpers/test_thread.h"
+#import "helpers/test_utils.h"
 
-#include "chunk_list_test.h"
-#include "hash_queue_test.h"
-#include "hash_check_queue_test.h"
+#import <functional>
+#import <signal.h>
 
-CPPUNIT_TEST_SUITE_REGISTRATION(HashQueueTest);
+#import "data/hash_queue.h"
+#import "data/hash_queue_node.h"
+#import "torrent/chunk_manager.h"
+#import "torrent/exceptions.h"
+#import "torrent/hash_string.h"
+#import "torrent/poll_select.h"
+#import "globals.h"
+#import "thread_disk.h"
+
+#import "test_chunk_list.h"
+#import "test_hash_check_queue.h"
+
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(test_hash_queue, "data");
 
 typedef std::map<int, torrent::HashString> done_chunks_type;
 
@@ -39,7 +43,9 @@ static torrent::Poll* create_select_poll() { return torrent::PollSelect::create(
 static void do_nothing() {}
 
 void
-HashQueueTest::setUp() {
+test_hash_queue::setUp() {
+  test_fixture::setUp();
+
   CPPUNIT_ASSERT(torrent::taskScheduler.empty());
 
   torrent::Poll::slot_create_poll() = std::bind(&create_select_poll);
@@ -47,25 +53,9 @@ HashQueueTest::setUp() {
 }
 
 void
-HashQueueTest::tearDown() {
+test_hash_queue::tearDown() {
   torrent::taskScheduler.clear();
-}
-
-void
-HashQueueTest::test_basic() {
-  // SETUP_CHUNK_LIST();
-  // SETUP_THREAD();
-  // thread_disk->start_thread();
-
-  // torrent::HashQueue* hash_queue = new torrent::HashQueue(thread_disk);
-  
-  // // Do stuff?
-
-  // delete hash_queue;
-
-  // thread_disk->stop_thread();
-  // CLEANUP_THREAD();
-  // CLEANUP_CHUNK_LIST();
+  test_fixture::tearDown();
 }
 
 static void
@@ -73,7 +63,7 @@ fill_queue() {
 }
 
 void
-HashQueueTest::test_single() {
+test_hash_queue::test_single() {
   SETUP_CHUNK_LIST();
   SETUP_THREAD();
   thread_disk->start_thread();
@@ -105,7 +95,7 @@ HashQueueTest::test_single() {
 }
 
 void
-HashQueueTest::test_multiple() {
+test_hash_queue::test_multiple() {
   SETUP_CHUNK_LIST();
   SETUP_THREAD();
   thread_disk->start_thread();
@@ -137,7 +127,7 @@ HashQueueTest::test_multiple() {
 }
 
 void
-HashQueueTest::test_erase() {
+test_hash_queue::test_erase() {
   SETUP_CHUNK_LIST();
   SETUP_THREAD();
 
@@ -164,7 +154,7 @@ HashQueueTest::test_erase() {
 }
 
 void
-HashQueueTest::test_erase_stress() {
+test_hash_queue::test_erase_stress() {
   SETUP_CHUNK_LIST();
   SETUP_THREAD();
   thread_disk->start_thread();
diff --git a/test/data/hash_queue_test.h b/test/data/test_hash_queue.h
similarity index 58%
rename from test/data/hash_queue_test.h
rename to test/data/test_hash_queue.h
index cb5b7282..79914484 100644
--- a/test/data/hash_queue_test.h
+++ b/test/data/test_hash_queue.h
@@ -1,10 +1,7 @@
-#include <cppunit/extensions/HelperMacros.h>
+#include "helpers/test_fixture.h"
 
-#include "data/hash_queue.h"
-
-class HashQueueTest : public CppUnit::TestFixture {
-  CPPUNIT_TEST_SUITE(HashQueueTest);
-  CPPUNIT_TEST(test_basic);
+class test_hash_queue : public test_fixture {
+  CPPUNIT_TEST_SUITE(test_hash_queue);
 
   CPPUNIT_TEST(test_single);
   CPPUNIT_TEST(test_multiple);
@@ -17,8 +14,6 @@ public:
   void setUp();
   void tearDown();
 
-  void test_basic();
-
   void test_single();
   void test_multiple();
   void test_erase();
diff --git a/test/helpers/progress_listener.cc b/test/helpers/progress_listener.cc
index c2b60bcd..7a6ed047 100644
--- a/test/helpers/progress_listener.cc
+++ b/test/helpers/progress_listener.cc
@@ -36,10 +36,10 @@ progress_listener::addFailure(const CppUnit::TestFailure &failure) {
   if (m_current_log_buffer == nullptr)
     return;
 
-  std::cout << " : " << (failure.isError() ? "error" : "assertion");
+  std::cout << " : " << (failure.isError() ? "error" : "assertion") << std::flush;
 
   m_last_test_failed = true;
-  m_failures.push_back(std::move(failure_type{failure.failedTestName(), std::move(m_current_log_buffer)}));
+  m_failures.push_back(failure_type{ failure.failedTestName(), std::move(m_current_log_buffer) });
 }
 
 void
diff --git a/test/helpers/test_fixture.h b/test/helpers/test_fixture.h
index 312d5009..aa557a5e 100644
--- a/test/helpers/test_fixture.h
+++ b/test/helpers/test_fixture.h
@@ -1,14 +1,14 @@
-#ifndef LIBTORRENT_HELPER_TEST_FIXTURE_H
-#define LIBTORRENT_HELPER_TEST_FIXTURE_H
-
-#include <cppunit/extensions/HelperMacros.h>
-
-#include "helpers/mock_function.h"
-
-class test_fixture : public CppUnit::TestFixture {
-public:
-  void setUp();
-  void tearDown();
-};
-
-#endif
+#ifndef LIBTORRENT_HELPER_TEST_FIXTURE_H
+#define LIBTORRENT_HELPER_TEST_FIXTURE_H
+
+#include <cppunit/extensions/HelperMacros.h>
+
+#include "helpers/mock_function.h"
+
+class test_fixture : public CppUnit::TestFixture {
+public:
+  void setUp();
+  void tearDown();
+};
+
+#endif
diff --git a/test/helpers/test_thread.cc b/test/helpers/test_thread.cc
new file mode 100755
index 00000000..4b3d4c95
--- /dev/null
+++ b/test/helpers/test_thread.cc
@@ -0,0 +1,71 @@
+#import "config.h"
+
+#import "test_thread.h"
+
+#import <unistd.h>
+#import <cppunit/extensions/HelperMacros.h>
+
+#import "thread_disk.h"
+#import "torrent/exceptions.h"
+#import "torrent/poll_select.h"
+
+const int test_thread::test_flag_pre_stop;
+const int test_thread::test_flag_long_timeout;
+
+const int test_thread::test_flag_acquire_global;
+const int test_thread::test_flag_has_global;
+
+const int test_thread::test_flag_do_work;
+const int test_thread::test_flag_pre_poke;
+const int test_thread::test_flag_post_poke;
+
+test_thread::test_thread() :
+  m_test_state(TEST_NONE),
+  m_test_flags(0) {
+}
+
+void
+test_thread::init_thread() {
+  m_state = STATE_INITIALIZED;
+  m_test_state = TEST_PRE_START;
+  m_poll = torrent::PollSelect::create(256);
+}
+
+void
+test_thread::call_events() {
+  if ((m_test_flags & test_flag_pre_stop) && m_test_state == TEST_PRE_START && m_state == STATE_ACTIVE)
+    __sync_lock_test_and_set(&m_test_state, TEST_PRE_STOP);
+
+  if ((m_test_flags & test_flag_acquire_global)) {
+    acquire_global_lock();
+    __sync_and_and_fetch(&m_test_flags, ~test_flag_acquire_global);
+    __sync_or_and_fetch(&m_test_flags, test_flag_has_global);
+  }
+
+  if ((m_flags & flag_do_shutdown)) {
+    if ((m_flags & flag_did_shutdown))
+      throw torrent::internal_error("Already trigged shutdown.");
+
+    __sync_or_and_fetch(&m_flags, flag_did_shutdown);
+    throw torrent::shutdown_exception();
+  }
+
+  if ((m_test_flags & test_flag_pre_poke)) {
+  }
+
+  if ((m_test_flags & test_flag_do_work)) {
+    usleep(10 * 1000); // TODO: Don't just sleep, as that give up core.
+    __sync_and_and_fetch(&m_test_flags, ~test_flag_do_work);
+  }
+
+  if ((m_test_flags & test_flag_post_poke)) {
+  }
+}
+
+thread_management_type::thread_management_type() {
+  CPPUNIT_ASSERT(torrent::thread_base::trylock_global_lock());
+}
+
+thread_management_type::~thread_management_type() {
+  torrent::thread_base::release_global_lock();
+}
diff --git a/test/helpers/test_thread.h b/test/helpers/test_thread.h
new file mode 100755
index 00000000..52037036
--- /dev/null
+++ b/test/helpers/test_thread.h
@@ -0,0 +1,59 @@
+#import "torrent/utils/thread_base.h"
+
+class test_thread : public torrent::thread_base {
+public:
+  enum test_state {
+    TEST_NONE,
+    TEST_PRE_START,
+    TEST_PRE_STOP,
+    TEST_STOP
+  };
+
+  static const int test_flag_pre_stop       = 0x1;
+  static const int test_flag_long_timeout   = 0x2;
+
+  static const int test_flag_acquire_global = 0x10;
+  static const int test_flag_has_global     = 0x20;
+
+  static const int test_flag_do_work   = 0x100;
+  static const int test_flag_pre_poke  = 0x200;
+  static const int test_flag_post_poke = 0x400;
+
+  test_thread();
+
+  int     test_state() const { return m_test_state; }
+  bool    is_state(int state) const { return m_state == state; }
+  bool    is_test_state(int state) const { return m_test_state == state; }
+  bool    is_test_flags(int flags) const { return (m_test_flags & flags) == flags; }
+  bool    is_not_test_flags(int flags) const { return !(m_test_flags & flags); }
+
+  auto    name() const -> const char* { return "test_thread"; }
+
+  void    init_thread();
+
+  void    set_pre_stop() { __sync_or_and_fetch(&m_test_flags, test_flag_pre_stop); }
+  void    set_acquire_global() { __sync_or_and_fetch(&m_test_flags, test_flag_acquire_global); }
+
+  void    set_test_flag(int flags) { __sync_or_and_fetch(&m_test_flags, flags); }
+
+private:
+  void    call_events();
+  int64_t next_timeout_usec() { return (m_test_flags & test_flag_long_timeout) ? (10000 * 1000) : (100 * 1000); }
+
+  int     m_test_state lt_cacheline_aligned;
+  int     m_test_flags lt_cacheline_aligned;
+};
+
+struct thread_management_type {
+  thread_management_type();
+  ~thread_management_type();
+};
+
+#define SETUP_THREAD()                                                  \
+  thread_management_type thread_management;                             \
+  torrent::thread_disk* thread_disk = new torrent::thread_disk();       \
+  thread_disk->init_thread();
+
+#define CLEANUP_THREAD()                                                \
+  CPPUNIT_ASSERT(wait_for_true(std::bind(&torrent::thread_base::is_inactive, thread_disk))); \
+  delete thread_disk;
diff --git a/test/helpers/test_utils.h b/test/helpers/test_utils.h
new file mode 100644
index 00000000..0c8c6b7a
--- /dev/null
+++ b/test/helpers/test_utils.h
@@ -0,0 +1,16 @@
+#include <functional>
+#include <unistd.h>
+
+inline bool
+wait_for_true(std::function<bool ()> test_function) {
+  int i = 100;
+
+  do {
+    if (test_function())
+      return true;
+
+    usleep(10 * 1000);
+  } while (--i);
+
+  return false;
+}
diff --git a/test/helpers/utils.h b/test/helpers/utils.h
index d18450c1..e81d22eb 100644
--- a/test/helpers/utils.h
+++ b/test/helpers/utils.h
@@ -1,60 +1,60 @@
-#ifndef LIBTORRENT_HELPER_UTILS_H
-#define LIBTORRENT_HELPER_UTILS_H
-
-#include <algorithm>
-#include <iostream>
-#include <cppunit/extensions/TestFactoryRegistry.h>
-#include <torrent/utils/log.h>
-
-static void
-dump_failure_log(const failure_type& failure) {
-  if (failure.log->empty())
-    return;
-
-  std::cout << std::endl << failure.name << std::endl;
-
-  // Doesn't print dump messages as log_buffer drops them.
-  std::for_each(failure.log->begin(), failure.log->end(), [](const torrent::log_entry& entry) {
-      std::cout << entry.timestamp << ' ' << entry.message << '\n';
-    });
-
-  std::cout << std::flush;
-}
-
-static void
-dump_failures(const failure_list_type& failures) {
-  if (failures.empty())
-    return;
-
-  std::cout << std::endl
-            << "=================" << std::endl
-            << "Failed Test Logs:" << std::endl
-            << "=================" << std::endl;
-
-  std::for_each(failures.begin(), failures.end(), [](const failure_type& failure) {
-      dump_failure_log(failure);
-    });
-  std::cout << std::endl;
-}
-
-static
-void add_tests(CppUnit::TextUi::TestRunner& runner, const char* c_test_names) {
-  if (c_test_names == NULL || std::string(c_test_names).empty()) {
-    runner.addTest(CppUnit::TestFactoryRegistry::getRegistry().makeTest());
-    return;
-  }
-
-  const std::string& test_names(c_test_names);
-
-  size_t pos = 0;
-  size_t next = 0;
-
-  while ((next = test_names.find(',', pos)) < test_names.size()) {
-    runner.addTest(CppUnit::TestFactoryRegistry::getRegistry(test_names.substr(pos, next - pos)).makeTest());
-    pos = next + 1;
-  }
-
-  runner.addTest(CppUnit::TestFactoryRegistry::getRegistry(test_names.substr(pos)).makeTest());
-}
-
-#endif
+#ifndef LIBTORRENT_HELPER_UTILS_H
+#define LIBTORRENT_HELPER_UTILS_H
+
+#include <algorithm>
+#include <iostream>
+#include <cppunit/extensions/TestFactoryRegistry.h>
+#include <torrent/utils/log.h>
+
+static void
+dump_failure_log(const failure_type& failure) {
+  if (failure.log->empty())
+    return;
+
+  std::cout << std::endl << failure.name << std::endl;
+
+  // Doesn't print dump messages as log_buffer drops them.
+  std::for_each(failure.log->begin(), failure.log->end(), [](const torrent::log_entry& entry) {
+      std::cout << entry.timestamp << ' ' << entry.message << '\n';
+    });
+
+  std::cout << std::flush;
+}
+
+static void
+dump_failures(const failure_list_type& failures) {
+  if (failures.empty())
+    return;
+
+  std::cout << std::endl
+            << "=================" << std::endl
+            << "Failed Test Logs:" << std::endl
+            << "=================" << std::endl;
+
+  std::for_each(failures.begin(), failures.end(), [](const failure_type& failure) {
+      dump_failure_log(failure);
+    });
+  std::cout << std::endl;
+}
+
+static
+void add_tests(CppUnit::TextUi::TestRunner& runner, const char* c_test_names) {
+  if (c_test_names == NULL || std::string(c_test_names).empty()) {
+    runner.addTest(CppUnit::TestFactoryRegistry::getRegistry().makeTest());
+    return;
+  }
+
+  const std::string& test_names(c_test_names);
+
+  size_t pos = 0;
+  size_t next = 0;
+
+  while ((next = test_names.find(',', pos)) < test_names.size()) {
+    runner.addTest(CppUnit::TestFactoryRegistry::getRegistry(test_names.substr(pos, next - pos)).makeTest());
+    pos = next + 1;
+  }
+
+  runner.addTest(CppUnit::TestFactoryRegistry::getRegistry(test_names.substr(pos)).makeTest());
+}
+
+#endif
diff --git a/test/main.cc b/test/main.cc
index e8a00e1f..57ae31a2 100644
--- a/test/main.cc
+++ b/test/main.cc
@@ -19,9 +19,11 @@
 #include "helpers/progress_listener.h"
 #include "helpers/utils.h"
 
-CPPUNIT_REGISTRY_ADD_TO_DEFAULT("net");
 CPPUNIT_REGISTRY_ADD_TO_DEFAULT("torrent/net");
 CPPUNIT_REGISTRY_ADD_TO_DEFAULT("torrent/utils");
+CPPUNIT_REGISTRY_ADD_TO_DEFAULT("torrent");
+CPPUNIT_REGISTRY_ADD_TO_DEFAULT("net");
+CPPUNIT_REGISTRY_ADD_TO_DEFAULT("tracker");
 
 void
 do_test_panic(int signum) {
diff --git a/test/torrent/http_test.cc b/test/torrent/test_http.cc
similarity index 94%
rename from test/torrent/http_test.cc
rename to test/torrent/test_http.cc
index 27e04552..24ec97b5 100644
--- a/test/torrent/http_test.cc
+++ b/test/torrent/test_http.cc
@@ -1,10 +1,11 @@
 #include "config.h"
 
-#include <sstream>
+#include "test_http.h"
 
-#include "http_test.h"
+#include <sstream>
+#include "torrent/http.h"
 
-CPPUNIT_TEST_SUITE_REGISTRATION(HttpTest);
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(test_http, "torrent");
 
 #define HTTP_SETUP()                                                    \
   bool http_destroyed = false;                                          \
@@ -72,7 +73,7 @@ TestHttp* create_test_http() { return new TestHttp; }
 static void increment_value(int* value) { (*value)++; }
 
 void
-HttpTest::test_basic() {
+test_http::test_basic() {
   torrent::Http::slot_factory() = std::bind(&create_test_http);
 
   torrent::Http* http = torrent::Http::slot_factory()();
@@ -94,7 +95,7 @@ HttpTest::test_basic() {
 }
 
 void
-HttpTest::test_done() {
+test_http::test_done() {
   HTTP_SETUP();
   http->start();
 
@@ -106,7 +107,7 @@ HttpTest::test_done() {
 }
 
 void
-HttpTest::test_failure() {
+test_http::test_failure() {
   HTTP_SETUP();
   http->start();
 
@@ -118,7 +119,7 @@ HttpTest::test_failure() {
 }
 
 void
-HttpTest::test_delete_on_done() {
+test_http::test_delete_on_done() {
   HTTP_SETUP();
   http->start();
   http->set_delete_stream();
@@ -145,7 +146,7 @@ HttpTest::test_delete_on_done() {
 }
 
 void
-HttpTest::test_delete_on_failure() {
+test_http::test_delete_on_failure() {
   HTTP_SETUP();
   http->start();
   http->set_delete_stream();
diff --git a/test/torrent/http_test.h b/test/torrent/test_http.h
similarity index 63%
rename from test/torrent/http_test.h
rename to test/torrent/test_http.h
index c6c97d08..f4334646 100644
--- a/test/torrent/http_test.h
+++ b/test/torrent/test_http.h
@@ -1,21 +1,18 @@
-#include <cppunit/extensions/HelperMacros.h>
+#import "helpers/test_fixture.h"
 
-#include "torrent/http.h"
+class test_http : public test_fixture {
+  CPPUNIT_TEST_SUITE(test_http);
 
-class HttpTest : public CppUnit::TestFixture {
-  CPPUNIT_TEST_SUITE(HttpTest);
   CPPUNIT_TEST(test_basic);
   CPPUNIT_TEST(test_done);
   CPPUNIT_TEST(test_failure);
 
   CPPUNIT_TEST(test_delete_on_done);
   CPPUNIT_TEST(test_delete_on_failure);
+
   CPPUNIT_TEST_SUITE_END();
 
 public:
-  void setUp() {}
-  void tearDown() {}
-
   void test_basic();
   void test_done();
   void test_failure();
diff --git a/test/torrent/utils/option_strings_test.h b/test/torrent/utils/option_strings_test.h
deleted file mode 100644
index 55df4f19..00000000
--- a/test/torrent/utils/option_strings_test.h
+++ /dev/null
@@ -1,17 +0,0 @@
-#include <cppunit/extensions/HelperMacros.h>
-
-#include "torrent/utils/option_strings.h"
-
-class option_strings_test : public CppUnit::TestFixture {
-  CPPUNIT_TEST_SUITE(option_strings_test);
-  CPPUNIT_TEST(test_basic);
-  CPPUNIT_TEST(test_entries);
-  CPPUNIT_TEST_SUITE_END();
-
-public:
-  void setUp() {}
-  void tearDown() {}
-
-  void test_basic();
-  void test_entries();
-};
diff --git a/test/torrent/utils/signal_bitfield_test.h b/test/torrent/utils/signal_bitfield_test.h
deleted file mode 100644
index 4590de41..00000000
--- a/test/torrent/utils/signal_bitfield_test.h
+++ /dev/null
@@ -1,23 +0,0 @@
-#include <cppunit/extensions/HelperMacros.h>
-
-#include "torrent/utils/signal_bitfield.h"
-
-class utils_signal_bitfield_test : public CppUnit::TestFixture {
-  CPPUNIT_TEST_SUITE(utils_signal_bitfield_test);
-  CPPUNIT_TEST(test_basic);
-  CPPUNIT_TEST(test_single);
-  CPPUNIT_TEST(test_multiple);
-
-  CPPUNIT_TEST(test_thread);
-  CPPUNIT_TEST_SUITE_END();
-
-public:
-  void setUp();
-  void tearDown();
-
-  void test_basic();
-  void test_single();
-  void test_multiple();
-
-  void test_thread();
-};
diff --git a/test/torrent/utils/test_extents.cc b/test/torrent/utils/test_extents.cc
index 87424d62..8e614e10 100644
--- a/test/torrent/utils/test_extents.cc
+++ b/test/torrent/utils/test_extents.cc
@@ -2,34 +2,25 @@
 
 #include "test_extents.h"
 
-#include <cinttypes>
-#include <iostream>
 #include <torrent/utils/extents.h>
+#include <torrent/utils/log.h>
 
-CPPUNIT_TEST_SUITE_REGISTRATION(ExtentsTest);
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(test_extents, "torrent/utils");
 
-void
-ExtentsTest::setUp() {
-}
+#define TEST_EXTENT_BEGIN(name)                                 \
+  lt_log_print(torrent::LOG_MOCK_CALLS, "extent: %s", name);
 
-void
-ExtentsTest::tearDown() {
-}
-
-//typedef torrent::extents<uint32_t, int, 8, 16, 4> extent_type_1;
 typedef torrent::extents<uint32_t, int> extent_type_1;
 
-// typedef torrent::extents<uint32_t, int, 0, 256, 16> extent_type_3;
-/*
 template <typename Extent>
 bool
 verify_extent_data(Extent& extent, const uint32_t* idx, const int* val) {
   while (*idx != *(idx + 1)) {
-    if (!extent.is_equal_range(*idx, *(idx + 1) - 1, *val)) {
-      // std::cout << *idx << ' ' << *(idx + 1) << ' ' << *val << std::endl;
-      // std::cout << extent.at(*idx) << std::endl;
-      // std::cout << extent.at(*(idx + 1)) << std::endl;
-      return false;
+    for (auto i = *idx; i != *(idx + 1); i++) {
+      lt_log_print(torrent::LOG_MOCK_CALLS, "extent: at %u", i);
+
+      if (extent.at(i) != *val)
+        return false;
     }
 
     idx++;
@@ -40,34 +31,32 @@ verify_extent_data(Extent& extent, const uint32_t* idx, const int* val) {
 }
 
 static const uint32_t idx_empty[] = {0, 256, 256};
-static const int      val_empty[] = {0, 1};
+static const int      val_empty[] = {0};
 
 static const uint32_t idx_basic_1[] = {0, 1, 255, 256, 256};
 static const int      val_basic_1[] = {1, 0, 1};
 
-// static const uint32_t idx_basic_2[] = {0, 1, 16, 255, 256, 256};
-// static const int      val_basic_2[] = {1, 0, 2, 1};
-*/
 void
-ExtentsTest::test_basic() {
+test_extents::test_basic() {
   extent_type_1 extent_1;
-/*
-  // Test empty.
-  CPPUNIT_ASSERT(verify_extent_data(extent_1, idx_empty, val_empty));
-
-  CPPUNIT_ASSERT(extent_1.at(0) == int());
-  CPPUNIT_ASSERT(extent_1.at(255) == int());
+  extent_1.insert(0, 255, int());
 
-  extent_1.insert(0, 0, 1);
-  extent_1.insert(255, 0, 1);
+  { TEST_EXTENT_BEGIN("empty");
+    CPPUNIT_ASSERT(verify_extent_data(extent_1, idx_empty, val_empty));
 
-  CPPUNIT_ASSERT(extent_1.at(0) == 1);
-  CPPUNIT_ASSERT(extent_1.at(255) == 1);
+    CPPUNIT_ASSERT(extent_1.at(0) == int());
+    CPPUNIT_ASSERT(extent_1.at(255) == int());
+  };
+  { TEST_EXTENT_BEGIN("borders");
 
-  CPPUNIT_ASSERT(verify_extent_data(extent_1, idx_basic_1, val_basic_1));
+    extent_1.insert(0, 0, 1);
+    extent_1.insert(255, 255, 1);
+    // This step shouldn't be needed.
+    extent_1.insert(1, 254, int());
 
-  // extent_1.insert(38, 3, 2);
+    CPPUNIT_ASSERT(extent_1.at(0) == 1);
+    CPPUNIT_ASSERT(extent_1.at(255) == 1);
 
-  // CPPUNIT_ASSERT(verify_extent_data(extent_1, idx_basic_2, val_basic_2));
-*/
+    CPPUNIT_ASSERT(verify_extent_data(extent_1, idx_basic_1, val_basic_1));
+  };
 }
diff --git a/test/torrent/utils/test_extents.h b/test/torrent/utils/test_extents.h
index fd790cf8..e187f6a7 100644
--- a/test/torrent/utils/test_extents.h
+++ b/test/torrent/utils/test_extents.h
@@ -1,13 +1,10 @@
-#include <cppunit/extensions/HelperMacros.h>
+#include "helpers/test_fixture.h"
 
-class ExtentsTest : public CppUnit::TestFixture {
-  CPPUNIT_TEST_SUITE(ExtentsTest);
+class test_extents : public test_fixture {
+  CPPUNIT_TEST_SUITE(test_extents);
   CPPUNIT_TEST(test_basic);
   CPPUNIT_TEST_SUITE_END();
 
 public:
-  void setUp();
-  void tearDown();
-
   void test_basic();
 };
diff --git a/test/torrent/utils/log_test.cc b/test/torrent/utils/test_log.cc
similarity index 92%
rename from test/torrent/utils/log_test.cc
rename to test/torrent/utils/test_log.cc
index 8cc00ef8..fec7e505 100644
--- a/test/torrent/utils/log_test.cc
+++ b/test/torrent/utils/test_log.cc
@@ -1,5 +1,7 @@
 #include "config.h"
 
+#include "test_log.h"
+
 #include <algorithm>
 #include <cstring>
 #include <fstream>
@@ -9,15 +11,13 @@
 #include <torrent/exceptions.h>
 #include <torrent/utils/log.h>
 
-#include "log_test.h"
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(test_log, "torrent/utils");
 
 namespace torrent {
 typedef std::vector<std::pair<std::string, log_slot> > log_output_list;
 extern log_output_list log_outputs;
 }
 
-CPPUNIT_TEST_SUITE_REGISTRATION(utils_log_test);
-
 const char* expected_output = NULL;
 unsigned int output_mask;
 
@@ -35,19 +35,19 @@ test_output(const char* output, unsigned int length, unsigned int mask) {
   CPPUNIT_ASSERT(output_mask == (mask));
 
 void
-utils_log_test::setUp() {
+test_log::setUp() {
   // Don't initialize since this creates the group->child connections.
   //  torrent::log_initialize();
   torrent::log_cleanup();
 }
 
 void
-utils_log_test::tearDown() {
+test_log::tearDown() {
   torrent::log_cleanup();
 }
 
 void
-utils_log_test::test_basic() {
+test_log::test_basic() {
   CPPUNIT_ASSERT(!torrent::log_groups.empty());
   CPPUNIT_ASSERT(torrent::log_groups.size() == torrent::LOG_GROUP_MAX_SIZE);
 
@@ -61,7 +61,7 @@ open_output(const char* name, int mask = 0) {
 }
 
 void
-utils_log_test::test_output_open() {
+test_log::test_output_open() {
   CPPUNIT_ASSERT(torrent::log_groups[0].size_outputs() == 0);
 
   // Add test for unknown output names.
@@ -92,7 +92,7 @@ utils_log_test::test_output_open() {
 // on unused log items.
 
 void
-utils_log_test::test_print() {
+test_log::test_print() {
   open_output("test_print_1", 0x1);
   open_output("test_print_2", 0x2);
   torrent::log_add_group_output(0, "test_print_1");
@@ -113,7 +113,7 @@ enum {
 };
 
 void
-utils_log_test::test_children() {
+test_log::test_children() {
   open_output("test_children_1", 0x1);
   open_output("test_children_2", 0x2);
   torrent::log_add_group_output(GROUP_PARENT_1, "test_children_1");
@@ -136,8 +136,8 @@ utils_log_test::test_children() {
 }
 
 void
-utils_log_test::test_file_output() {
-  std::string filename = "utils_log_test.XXXXXX";
+test_log::test_file_output() {
+  std::string filename = "test_log.XXXXXX";
 
   mktemp(&*filename.begin());
 
@@ -159,8 +159,8 @@ utils_log_test::test_file_output() {
 }
 
 void
-utils_log_test::test_file_output_append() {
-  std::string filename = "utils_log_test.XXXXXX";
+test_log::test_file_output_append() {
+  std::string filename = "test_log.XXXXXX";
 
   mktemp(&*filename.begin());
 
diff --git a/test/torrent/utils/log_test.h b/test/torrent/utils/test_log.h
similarity index 71%
rename from test/torrent/utils/log_test.h
rename to test/torrent/utils/test_log.h
index d4cb3bc6..a06c95ae 100644
--- a/test/torrent/utils/log_test.h
+++ b/test/torrent/utils/test_log.h
@@ -1,9 +1,7 @@
-#include <cppunit/extensions/HelperMacros.h>
+#include "helpers/test_fixture.h"
 
-#include "torrent/utils/log.h"
-
-class utils_log_test : public CppUnit::TestFixture {
-  CPPUNIT_TEST_SUITE(utils_log_test);
+class test_log : public test_fixture {
+  CPPUNIT_TEST_SUITE(test_log);
   CPPUNIT_TEST(test_basic);
   CPPUNIT_TEST(test_output_open);
 
diff --git a/test/torrent/utils/test_log_buffer.cc b/test/torrent/utils/test_log_buffer.cc
index a56a5365..58412750 100644
--- a/test/torrent/utils/test_log_buffer.cc
+++ b/test/torrent/utils/test_log_buffer.cc
@@ -7,18 +7,10 @@
 
 CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(test_log_buffer, "torrent/utils");
 
-void
-test_log_buffer::setUp() {
-  torrent::cachedTime = rak::timer::from_seconds(1000);
-}
-
-void
-test_log_buffer::tearDown() {
-}
-
 void
 test_log_buffer::test_basic() {
   torrent::log_buffer log;
+  torrent::cachedTime = rak::timer::from_seconds(1000);
 
   log.lock();
   CPPUNIT_ASSERT(log.empty());
@@ -46,6 +38,7 @@ test_log_buffer::test_basic() {
 void
 test_log_buffer::test_timestamps() {
   torrent::log_buffer log;
+  torrent::cachedTime = rak::timer::from_seconds(1000);
 
   log.lock_and_push_log("foobar", 6, 0);
   CPPUNIT_ASSERT(log.back().timestamp == 1000);
diff --git a/test/torrent/utils/test_log_buffer.h b/test/torrent/utils/test_log_buffer.h
index 290df4c1..39c6b879 100644
--- a/test/torrent/utils/test_log_buffer.h
+++ b/test/torrent/utils/test_log_buffer.h
@@ -2,16 +2,11 @@
 
 class test_log_buffer : public test_fixture {
   CPPUNIT_TEST_SUITE(test_log_buffer);
-
   CPPUNIT_TEST(test_basic);
   CPPUNIT_TEST(test_timestamps);
-
   CPPUNIT_TEST_SUITE_END();
 
 public:
-  void setUp();
-  void tearDown();
-
   void test_basic();
   void test_timestamps();
 };
diff --git a/test/torrent/utils/option_strings_test.cc b/test/torrent/utils/test_option_strings.cc
similarity index 65%
rename from test/torrent/utils/option_strings_test.cc
rename to test/torrent/utils/test_option_strings.cc
index a9bdcc89..68da1d2b 100644
--- a/test/torrent/utils/option_strings_test.cc
+++ b/test/torrent/utils/test_option_strings.cc
@@ -1,35 +1,22 @@
 #include "config.h"
 
-#include <fstream>
-#include <functional>
-#include <iostream>
+#include "test_option_strings.h"
 
-#include <torrent/exceptions.h>
-#include <torrent/utils/option_strings.h>
-
-#include <torrent/connection_manager.h>
-#include <torrent/object.h>
 #include <torrent/download.h>
-#include <torrent/download/choke_group.h>
-#include <torrent/download/choke_queue.h>
+#include <torrent/utils/option_strings.h>
 #include <torrent/utils/log.h>
 
-#include "option_strings_test.h"
-
-CPPUNIT_TEST_SUITE_REGISTRATION(option_strings_test);
-
-void
-option_strings_test::test_basic() {
-  
-}
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(test_option_strings, "torrent/utils");
 
 #define TEST_ENTRY(group, name, value)                                  \
-  { std::string result(torrent::option_as_string(torrent::group, value)); \
+  { lt_log_print(torrent::LOG_MOCK_CALLS, "option_string: %s", name);   \
+    std::string result(torrent::option_as_string(torrent::group, value)); \
     CPPUNIT_ASSERT_MESSAGE("Not found '" + result + "'", result == name); \
-    CPPUNIT_ASSERT(torrent::option_find_string(torrent::group, name) == value); }
+    CPPUNIT_ASSERT(torrent::option_find_string(torrent::group, name) == value); \
+  }
 
 void
-option_strings_test::test_entries() {
+test_option_strings::test_entries() {
   TEST_ENTRY(OPTION_CONNECTION_TYPE, "leech", torrent::Download::CONNECTION_LEECH);
   TEST_ENTRY(OPTION_CONNECTION_TYPE, "seed", torrent::Download::CONNECTION_SEED);
   TEST_ENTRY(OPTION_CONNECTION_TYPE, "initial_seed", torrent::Download::CONNECTION_INITIAL_SEED);
diff --git a/test/torrent/utils/test_option_strings.h b/test/torrent/utils/test_option_strings.h
new file mode 100644
index 00000000..dc86e735
--- /dev/null
+++ b/test/torrent/utils/test_option_strings.h
@@ -0,0 +1,10 @@
+#include "helpers/test_fixture.h"
+
+class test_option_strings : public test_fixture {
+  CPPUNIT_TEST_SUITE(test_option_strings);
+  CPPUNIT_TEST(test_entries);
+  CPPUNIT_TEST_SUITE_END();
+
+public:
+  void test_entries();
+};
diff --git a/test/torrent/utils/test_queue_buckets.cc b/test/torrent/utils/test_queue_buckets.cc
index a32d17e7..49d1bae6 100644
--- a/test/torrent/utils/test_queue_buckets.cc
+++ b/test/torrent/utils/test_queue_buckets.cc
@@ -5,7 +5,7 @@
 #include "utils/instrumentation.h"
 #include "utils/queue_buckets.h"
 
-CPPUNIT_TEST_SUITE_REGISTRATION(TestQueueBuckets);
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(test_queue_buckets, "torrent/utils");
 
 struct test_constants {
   static const int bucket_count = 2;
@@ -87,7 +87,7 @@ struct test_queue_bucket_compare {
 //
 
 void
-TestQueueBuckets::test_basic() {
+test_queue_buckets::test_basic() {
   torrent::instrumentation_initialize();
 
   buckets_type buckets;
@@ -129,7 +129,7 @@ TestQueueBuckets::test_basic() {
 }
 
 void
-TestQueueBuckets::test_erase() {
+test_queue_buckets::test_erase() {
   items_destroyed = 0;
   torrent::instrumentation_initialize();
 
@@ -162,7 +162,7 @@ bucket_queue_find_in_any(const buckets_type& buckets, int value) {
 }
 
 void
-TestQueueBuckets::test_find() {
+test_queue_buckets::test_find() {
   items_destroyed = 0;
   torrent::instrumentation_initialize();
 
@@ -183,7 +183,7 @@ TestQueueBuckets::test_find() {
 }
 
 void
-TestQueueBuckets::test_destroy_range() {
+test_queue_buckets::test_destroy_range() {
   items_destroyed = 0;
   torrent::instrumentation_initialize();
 
@@ -206,7 +206,7 @@ TestQueueBuckets::test_destroy_range() {
 }
 
 void
-TestQueueBuckets::test_move_range() {
+test_queue_buckets::test_move_range() {
   items_destroyed = 0;
   torrent::instrumentation_initialize();
 
diff --git a/test/torrent/utils/test_queue_buckets.h b/test/torrent/utils/test_queue_buckets.h
index 94624573..a7f1c30a 100644
--- a/test/torrent/utils/test_queue_buckets.h
+++ b/test/torrent/utils/test_queue_buckets.h
@@ -1,21 +1,18 @@
-#include <cppunit/extensions/HelperMacros.h>
+#include "helpers/test_fixture.h"
 
-#include "protocol/request_list.h"
+class test_queue_buckets : public test_fixture {
+  CPPUNIT_TEST_SUITE(test_queue_buckets);
 
-class TestQueueBuckets : public CppUnit::TestFixture {
-  CPPUNIT_TEST_SUITE(TestQueueBuckets);
   CPPUNIT_TEST(test_basic);
   CPPUNIT_TEST(test_erase);
   CPPUNIT_TEST(test_find);
 
   CPPUNIT_TEST(test_destroy_range);
   CPPUNIT_TEST(test_move_range);
+
   CPPUNIT_TEST_SUITE_END();
 
 public:
-  void setUp() {}
-  void tearDown() {}
-
   void test_basic();
   void test_erase();
   void test_find();
diff --git a/test/torrent/utils/signal_bitfield_test.cc b/test/torrent/utils/test_signal_bitfield.cc
similarity index 85%
rename from test/torrent/utils/signal_bitfield_test.cc
rename to test/torrent/utils/test_signal_bitfield.cc
index 34b622b3..4ecd18c0 100644
--- a/test/torrent/utils/signal_bitfield_test.cc
+++ b/test/torrent/utils/test_signal_bitfield.cc
@@ -1,13 +1,15 @@
 #include "config.h"
 
+#include "test_signal_bitfield.h"
+
+#include "helpers/test_thread.h"
+#include "helpers/test_utils.h"
+
 #include <torrent/exceptions.h>
 #include <torrent/utils/signal_bitfield.h>
 #include <torrent/utils/thread_base.h>
 
-#include "signal_bitfield_test.h"
-#include "thread_base_test.h"
-
-CPPUNIT_TEST_SUITE_REGISTRATION(utils_signal_bitfield_test);
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(test_signal_bitfield, "torrent/utils");
 
 static void
 mark_index(uint32_t* bitfield, unsigned int index) {
@@ -20,13 +22,10 @@ check_index(uint32_t* bitfield, unsigned int index) {
 }
 
 void
-utils_signal_bitfield_test::setUp() {
-}
-
-void
-utils_signal_bitfield_test::tearDown() {
+test_signal_bitfield::tearDown() {
   CPPUNIT_ASSERT(torrent::thread_base::trylock_global_lock());
   torrent::thread_base::release_global_lock();
+  test_fixture::tearDown();
 }
 
 static bool
@@ -54,7 +53,7 @@ verify_did_internal_error(std::function<unsigned int ()> func, bool should_throw
                                            did_throw));
 
 void
-utils_signal_bitfield_test::test_basic() {
+test_signal_bitfield::test_basic() {
   SETUP_SIGNAL_BITFIELD();
 
   CPPUNIT_ASSERT(torrent::signal_bitfield::max_size == sizeof(torrent::signal_bitfield::bitfield_type) * 8);
@@ -68,7 +67,7 @@ utils_signal_bitfield_test::test_basic() {
 }
 
 void
-utils_signal_bitfield_test::test_single() {
+test_signal_bitfield::test_single() {
   SETUP_SIGNAL_BITFIELD();
 
   CPPUNIT_ASSERT(signal_bitfield.add_signal(std::bind(&mark_index, &marked_bitfield, 0)) == 0);
@@ -86,7 +85,7 @@ utils_signal_bitfield_test::test_single() {
 }
 
 void
-utils_signal_bitfield_test::test_multiple() {
+test_signal_bitfield::test_multiple() {
   SETUP_SIGNAL_BITFIELD();
 
   for (unsigned int i = 0; i < torrent::signal_bitfield::max_size; i++)
@@ -106,10 +105,10 @@ utils_signal_bitfield_test::test_multiple() {
 }
 
 void
-utils_signal_bitfield_test::test_thread() {
+test_signal_bitfield::test_threaded() {
   uint32_t marked_bitfield = 0;
-  thread_test* thread = new thread_test;
-  // thread->set_test_flag(thread_test::test_flag_long_timeout);
+  test_thread* thread = new test_thread;
+  // thread->set_test_flag(test_thread::test_flag_long_timeout);
 
   for (unsigned int i = 0; i < torrent::signal_bitfield::max_size; i++)
     CPPUNIT_ASSERT(thread->signal_bitfield()->add_signal(std::bind(&mark_index, &marked_bitfield, i)) == i);
@@ -131,7 +130,7 @@ utils_signal_bitfield_test::test_thread() {
   }
 
   thread->stop_thread();
-  CPPUNIT_ASSERT(wait_for_true(std::bind(&thread_test::is_state, thread, thread_test::STATE_INACTIVE)));
+  CPPUNIT_ASSERT(wait_for_true(std::bind(&test_thread::is_state, thread, test_thread::STATE_INACTIVE)));
 
   delete thread;
 }
diff --git a/test/torrent/utils/test_signal_bitfield.h b/test/torrent/utils/test_signal_bitfield.h
new file mode 100644
index 00000000..2d24d955
--- /dev/null
+++ b/test/torrent/utils/test_signal_bitfield.h
@@ -0,0 +1,22 @@
+#include "helpers/test_fixture.h"
+
+class test_signal_bitfield : public test_fixture {
+  CPPUNIT_TEST_SUITE(test_signal_bitfield);
+
+  CPPUNIT_TEST(test_basic);
+  CPPUNIT_TEST(test_single);
+  CPPUNIT_TEST(test_multiple);
+
+  CPPUNIT_TEST(test_threaded);
+
+  CPPUNIT_TEST_SUITE_END();
+
+public:
+  void tearDown();
+
+  void test_basic();
+  void test_single();
+  void test_multiple();
+
+  void test_threaded();
+};
diff --git a/test/torrent/utils/test_thread_base.cc b/test/torrent/utils/test_thread_base.cc
new file mode 100644
index 00000000..33519b7c
--- /dev/null
+++ b/test/torrent/utils/test_thread_base.cc
@@ -0,0 +1,169 @@
+#include "config.h"
+
+#include "test_thread_base.h"
+
+#include "helpers/test_thread.h"
+#include "helpers/test_utils.h"
+
+#include <functional>
+#include <unistd.h>
+
+#include "torrent/exceptions.h"
+#include "torrent/poll_select.h"
+#include "torrent/utils/log.h"
+#include "torrent/utils/thread_base.h"
+
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(test_thread_base, "torrent/utils");
+
+#define TEST_BEGIN(name)                                           \
+  lt_log_print(torrent::LOG_MOCK_CALLS, "thread_base: %s", name);  \
+
+void throw_shutdown_exception() { throw torrent::shutdown_exception(); }
+
+void
+test_thread_base::tearDown() {
+  CPPUNIT_ASSERT(torrent::thread_base::trylock_global_lock());
+  torrent::thread_base::release_global_lock();
+  test_fixture::tearDown();
+}
+
+void
+test_thread_base::test_basic() {
+  test_thread* thread = new test_thread;
+
+  CPPUNIT_ASSERT(thread->flags() == 0);
+
+  CPPUNIT_ASSERT(!thread->is_main_polling());
+  CPPUNIT_ASSERT(!thread->is_active());
+  CPPUNIT_ASSERT(thread->global_queue_size() == 0);
+  CPPUNIT_ASSERT(thread->poll() == NULL);
+
+  // Check active...
+}
+
+void
+test_thread_base::test_lifecycle() {
+  test_thread* thread = new test_thread;
+
+  CPPUNIT_ASSERT(thread->state() == torrent::thread_base::STATE_UNKNOWN);
+  CPPUNIT_ASSERT(thread->test_state() == test_thread::TEST_NONE);
+
+  thread->init_thread();
+  CPPUNIT_ASSERT(thread->state() == torrent::thread_base::STATE_INITIALIZED);
+  CPPUNIT_ASSERT(thread->is_initialized());
+  CPPUNIT_ASSERT(thread->test_state() == test_thread::TEST_PRE_START);
+
+  thread->set_pre_stop();
+  CPPUNIT_ASSERT(!wait_for_true(std::bind(&test_thread::is_test_state, thread, test_thread::TEST_PRE_STOP)));
+
+  thread->start_thread();
+  CPPUNIT_ASSERT(wait_for_true(std::bind(&test_thread::is_state, thread, test_thread::STATE_ACTIVE)));
+  CPPUNIT_ASSERT(thread->is_active());
+  CPPUNIT_ASSERT(wait_for_true(std::bind(&test_thread::is_test_state, thread, test_thread::TEST_PRE_STOP)));
+
+  thread->stop_thread();
+  CPPUNIT_ASSERT(wait_for_true(std::bind(&test_thread::is_state, thread, test_thread::STATE_INACTIVE)));
+  CPPUNIT_ASSERT(thread->is_inactive());
+
+  delete thread;
+}
+
+void
+test_thread_base::test_global_lock_basic() {
+  test_thread* thread = new test_thread;
+  
+  thread->init_thread();
+  thread->start_thread();
+  
+  CPPUNIT_ASSERT(torrent::thread_base::global_queue_size() == 0);
+
+  // Acquire main thread...
+  CPPUNIT_ASSERT(torrent::thread_base::trylock_global_lock());
+  CPPUNIT_ASSERT(!torrent::thread_base::trylock_global_lock());
+
+  torrent::thread_base::release_global_lock();
+  CPPUNIT_ASSERT(torrent::thread_base::trylock_global_lock());
+  CPPUNIT_ASSERT(!torrent::thread_base::trylock_global_lock());
+    
+  torrent::thread_base::release_global_lock();
+  torrent::thread_base::acquire_global_lock();
+  CPPUNIT_ASSERT(!torrent::thread_base::trylock_global_lock());
+
+  thread->set_acquire_global();
+  CPPUNIT_ASSERT(!wait_for_true(std::bind(&test_thread::is_test_flags, thread, test_thread::test_flag_has_global)));
+  
+  torrent::thread_base::release_global_lock();
+  CPPUNIT_ASSERT(wait_for_true(std::bind(&test_thread::is_test_flags, thread, test_thread::test_flag_has_global)));
+
+  CPPUNIT_ASSERT(!torrent::thread_base::trylock_global_lock());
+  torrent::thread_base::release_global_lock();
+  CPPUNIT_ASSERT(torrent::thread_base::trylock_global_lock());
+
+  // Test waive (loop).
+
+  CPPUNIT_ASSERT(torrent::thread_base::global_queue_size() == 0);
+
+  torrent::thread_base::release_global_lock();
+  thread->stop_thread();
+  CPPUNIT_ASSERT(wait_for_true(std::bind(&test_thread::is_state, thread, test_thread::STATE_INACTIVE)));
+
+  delete thread;
+}
+
+void
+test_thread_base::test_interrupt() {
+  test_thread* thread = new test_thread;
+  thread->set_test_flag(test_thread::test_flag_long_timeout);
+
+  thread->init_thread();
+  thread->start_thread();
+
+  // Vary the various timeouts.
+
+  for (int i = 0; i < 100; i++) {
+    thread->interrupt();
+    usleep(0);
+
+    thread->set_test_flag(test_thread::test_flag_do_work);
+    thread->interrupt();
+
+    // Wait for flag to clear.
+    CPPUNIT_ASSERT(wait_for_true(std::bind(&test_thread::is_not_test_flags, thread, test_thread::test_flag_do_work)));
+  }
+
+  thread->stop_thread();
+  CPPUNIT_ASSERT(wait_for_true(std::bind(&test_thread::is_state, thread, test_thread::STATE_INACTIVE)));
+
+  delete thread;
+}
+
+void
+test_thread_base::test_stop() {
+  { TEST_BEGIN("trylock global lock");
+    CPPUNIT_ASSERT(torrent::thread_base::trylock_global_lock());
+    // torrent::thread_base::acquire_global_lock();
+  };
+
+  for (int i = 0; i < 20; i++) {
+    CPPUNIT_ASSERT(!torrent::thread_base::trylock_global_lock());
+
+    test_thread* thread = new test_thread;
+    thread->set_test_flag(test_thread::test_flag_do_work);
+
+    { TEST_BEGIN("init and start thread");
+      thread->init_thread();
+      thread->start_thread();
+    };
+
+    { TEST_BEGIN("stop and delete thread");
+      thread->stop_thread_wait();
+      CPPUNIT_ASSERT(thread->is_inactive());
+
+      delete thread;
+    }
+  }
+
+  { TEST_BEGIN("release global lock");
+    torrent::thread_base::release_global_lock();
+  };
+}
diff --git a/test/torrent/utils/test_thread_base.h b/test/torrent/utils/test_thread_base.h
new file mode 100644
index 00000000..7b2a3432
--- /dev/null
+++ b/test/torrent/utils/test_thread_base.h
@@ -0,0 +1,25 @@
+#include "helpers/test_fixture.h"
+
+class test_thread_base : public test_fixture {
+  CPPUNIT_TEST_SUITE(test_thread_base);
+
+  CPPUNIT_TEST(test_basic);
+  CPPUNIT_TEST(test_lifecycle);
+
+  CPPUNIT_TEST(test_global_lock_basic);
+  CPPUNIT_TEST(test_interrupt);
+  CPPUNIT_TEST(test_stop);
+
+  CPPUNIT_TEST_SUITE_END();
+
+public:
+  void tearDown();
+
+  void test_basic();
+  void test_lifecycle();
+
+  void test_global_lock_basic();
+  void test_interrupt();
+  void test_interrupt_legacy();
+  void test_stop();
+};
diff --git a/test/torrent/utils/test_uri_parser.cc b/test/torrent/utils/test_uri_parser.cc
index 1f4bebe8..66d6cda5 100644
--- a/test/torrent/utils/test_uri_parser.cc
+++ b/test/torrent/utils/test_uri_parser.cc
@@ -2,31 +2,22 @@
 
 #include "test_uri_parser.h"
 
-#include <cinttypes>
-#include <iostream>
+#include <torrent/utils/log.h>
 #include <torrent/utils/uri_parser.h>
 
-CPPUNIT_TEST_SUITE_REGISTRATION(UriParserTest);
-
-void
-UriParserTest::setUp() {
-}
-
-void
-UriParserTest::tearDown() {
-}
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(test_uri_parser, "torrent/utils");
 
 void
 test_print_uri_state(torrent::utils::uri_state state) {
-  std::cerr << "state.uri: " << state.uri << std::endl;
-  std::cerr << "state.scheme: " << state.scheme << std::endl;
-  std::cerr << "state.resource: " << state.resource << std::endl;
-  std::cerr << "state.query: " << state.query << std::endl;
-  std::cerr << "state.fragment: " << state.fragment << std::endl;
+  lt_log_print(torrent::LOG_MOCK_CALLS, "state.uri: %s", state.uri.c_str());
+  lt_log_print(torrent::LOG_MOCK_CALLS, "state.scheme: %s", state.scheme.c_str());
+  lt_log_print(torrent::LOG_MOCK_CALLS, "state.resource: %s", state.resource.c_str());
+  lt_log_print(torrent::LOG_MOCK_CALLS, "state.query: %s", state.query.c_str());
+  lt_log_print(torrent::LOG_MOCK_CALLS, "state.fragment: %s", state.fragment.c_str());
 }
 
 void
-UriParserTest::test_basic() {
+test_uri_parser::test_basic() {
   torrent::utils::uri_state state;
 
   CPPUNIT_ASSERT(state.state == torrent::utils::uri_state::state_empty);
@@ -37,7 +28,7 @@ UriParserTest::test_basic() {
 #define MAGNET_BASIC "magnet:?xt=urn:sha1:YNCKHTQCWBTRNJIV4WNAE52SJUQCZO5C"
 
 void
-UriParserTest::test_basic_magnet() {
+test_uri_parser::test_basic_magnet() {
   torrent::utils::uri_state state;
 
   uri_parse_str(MAGNET_BASIC, state);
@@ -63,7 +54,7 @@ UriParserTest::test_basic_magnet() {
 #define QUERY_MAGNET "magnet:?" QUERY_MAGNET_QUERY
 
 void
-UriParserTest::test_query_magnet() {
+test_uri_parser::test_query_magnet() {
   torrent::utils::uri_state state;
   torrent::utils::uri_query_state query_state;
 
@@ -82,7 +73,7 @@ UriParserTest::test_query_magnet() {
   uri_parse_query_str(state.query, query_state);
   
   for (auto element : query_state.elements)
-    std::cerr << "query_element: " << element << std::endl;
+    lt_log_print(torrent::LOG_MOCK_CALLS, "query_element: %s", element.c_str());
 
   CPPUNIT_ASSERT(query_state.state == torrent::utils::uri_query_state::state_valid);
 
diff --git a/test/torrent/utils/test_uri_parser.h b/test/torrent/utils/test_uri_parser.h
index 4f1c2586..f978c8ad 100644
--- a/test/torrent/utils/test_uri_parser.h
+++ b/test/torrent/utils/test_uri_parser.h
@@ -1,16 +1,15 @@
-#include <cppunit/extensions/HelperMacros.h>
+#include "helpers/test_fixture.h"
+
+class test_uri_parser : public test_fixture {
+  CPPUNIT_TEST_SUITE(test_uri_parser);
 
-class UriParserTest : public CppUnit::TestFixture {
-  CPPUNIT_TEST_SUITE(UriParserTest);
   CPPUNIT_TEST(test_basic);
   CPPUNIT_TEST(test_basic_magnet);
   CPPUNIT_TEST(test_query_magnet);
+
   CPPUNIT_TEST_SUITE_END();
 
 public:
-  void setUp();
-  void tearDown();
-
   void test_basic();
   void test_basic_magnet();
   void test_query_magnet();
diff --git a/test/torrent/utils/thread_base_test.cc b/test/torrent/utils/thread_base_test.cc
deleted file mode 100644
index 8366c9ba..00000000
--- a/test/torrent/utils/thread_base_test.cc
+++ /dev/null
@@ -1,224 +0,0 @@
-#include "config.h"
-
-#include <functional>
-#include <unistd.h>
-
-#include <torrent/exceptions.h>
-#include <torrent/poll_select.h>
-#include <torrent/utils/thread_base.h>
-
-#include "thread_base_test.h"
-
-CPPUNIT_TEST_SUITE_REGISTRATION(utils_thread_base_test);
-
-const int thread_test::test_flag_pre_stop;
-const int thread_test::test_flag_long_timeout;
-
-const int thread_test::test_flag_acquire_global;
-const int thread_test::test_flag_has_global;
-
-const int thread_test::test_flag_do_work;
-const int thread_test::test_flag_pre_poke;
-const int thread_test::test_flag_post_poke;
-
-void throw_shutdown_exception() { throw torrent::shutdown_exception(); }
-
-thread_test::thread_test() :
-  m_test_state(TEST_NONE),
-  m_test_flags(0) {
-}
-
-void
-thread_test::init_thread() {
-  m_state = STATE_INITIALIZED;
-  m_test_state = TEST_PRE_START;
-  m_poll = torrent::PollSelect::create(256);
-}
-
-void
-thread_test::call_events() {
-  if ((m_test_flags & test_flag_pre_stop) && m_test_state == TEST_PRE_START && m_state == STATE_ACTIVE)
-    __sync_lock_test_and_set(&m_test_state, TEST_PRE_STOP);
-
-  if ((m_test_flags & test_flag_acquire_global)) {
-    acquire_global_lock();
-    __sync_and_and_fetch(&m_test_flags, ~test_flag_acquire_global);
-    __sync_or_and_fetch(&m_test_flags, test_flag_has_global);
-  }
-
-  if ((m_flags & flag_do_shutdown)) {
-    if ((m_flags & flag_did_shutdown))
-      throw torrent::internal_error("Already trigged shutdown.");
-
-    __sync_or_and_fetch(&m_flags, flag_did_shutdown);
-    throw torrent::shutdown_exception();
-  }
-
-  if ((m_test_flags & test_flag_pre_poke)) {
-  }
-
-  if ((m_test_flags & test_flag_do_work)) {
-    usleep(10 * 1000); // TODO: Don't just sleep, as that give up core.
-    __sync_and_and_fetch(&m_test_flags, ~test_flag_do_work);
-  }
-
-  if ((m_test_flags & test_flag_post_poke)) {
-  }
-}
-
-bool
-wait_for_true(std::function<bool ()> test_function) {
-  int i = 100;
-
-  do {
-    if (test_function())
-      return true;
-
-    usleep(10 * 1000);
-  } while (--i);
-
-  return false;
-}
-
-void
-utils_thread_base_test::setUp() {
-}
-
-void
-utils_thread_base_test::tearDown() {
-  CPPUNIT_ASSERT(torrent::thread_base::trylock_global_lock());
-  torrent::thread_base::release_global_lock();
-}
-
-void
-utils_thread_base_test::test_basic() {
-  thread_test* thread = new thread_test;
-
-  CPPUNIT_ASSERT(thread->flags() == 0);
-
-  CPPUNIT_ASSERT(!thread->is_main_polling());
-  CPPUNIT_ASSERT(!thread->is_active());
-  CPPUNIT_ASSERT(thread->global_queue_size() == 0);
-  CPPUNIT_ASSERT(thread->poll() == NULL);
-
-  // Check active...
-}
-
-void
-utils_thread_base_test::test_lifecycle() {
-  thread_test* thread = new thread_test;
-
-  CPPUNIT_ASSERT(thread->state() == torrent::thread_base::STATE_UNKNOWN);
-  CPPUNIT_ASSERT(thread->test_state() == thread_test::TEST_NONE);
-
-  thread->init_thread();
-  CPPUNIT_ASSERT(thread->state() == torrent::thread_base::STATE_INITIALIZED);
-  CPPUNIT_ASSERT(thread->is_initialized());
-  CPPUNIT_ASSERT(thread->test_state() == thread_test::TEST_PRE_START);
-
-  thread->set_pre_stop();
-  CPPUNIT_ASSERT(!wait_for_true(std::bind(&thread_test::is_test_state, thread, thread_test::TEST_PRE_STOP)));
-
-  thread->start_thread();
-  CPPUNIT_ASSERT(wait_for_true(std::bind(&thread_test::is_state, thread, thread_test::STATE_ACTIVE)));
-  CPPUNIT_ASSERT(thread->is_active());
-  CPPUNIT_ASSERT(wait_for_true(std::bind(&thread_test::is_test_state, thread, thread_test::TEST_PRE_STOP)));
-
-  thread->stop_thread();
-  CPPUNIT_ASSERT(wait_for_true(std::bind(&thread_test::is_state, thread, thread_test::STATE_INACTIVE)));
-  CPPUNIT_ASSERT(thread->is_inactive());
-
-  delete thread;
-}
-
-void
-utils_thread_base_test::test_global_lock_basic() {
-  thread_test* thread = new thread_test;
-  
-  thread->init_thread();
-  thread->start_thread();
-  
-  CPPUNIT_ASSERT(torrent::thread_base::global_queue_size() == 0);
-
-  // Acquire main thread...
-  CPPUNIT_ASSERT(torrent::thread_base::trylock_global_lock());
-  CPPUNIT_ASSERT(!torrent::thread_base::trylock_global_lock());
-
-  torrent::thread_base::release_global_lock();
-  CPPUNIT_ASSERT(torrent::thread_base::trylock_global_lock());
-  CPPUNIT_ASSERT(!torrent::thread_base::trylock_global_lock());
-    
-  torrent::thread_base::release_global_lock();
-  torrent::thread_base::acquire_global_lock();
-  CPPUNIT_ASSERT(!torrent::thread_base::trylock_global_lock());
-
-  thread->set_acquire_global();
-  CPPUNIT_ASSERT(!wait_for_true(std::bind(&thread_test::is_test_flags, thread, thread_test::test_flag_has_global)));
-  
-  torrent::thread_base::release_global_lock();
-  CPPUNIT_ASSERT(wait_for_true(std::bind(&thread_test::is_test_flags, thread, thread_test::test_flag_has_global)));
-
-  CPPUNIT_ASSERT(!torrent::thread_base::trylock_global_lock());
-  torrent::thread_base::release_global_lock();
-  CPPUNIT_ASSERT(torrent::thread_base::trylock_global_lock());
-
-  // Test waive (loop).
-
-  CPPUNIT_ASSERT(torrent::thread_base::global_queue_size() == 0);
-
-  torrent::thread_base::release_global_lock();
-  thread->stop_thread();
-  CPPUNIT_ASSERT(wait_for_true(std::bind(&thread_test::is_state, thread, thread_test::STATE_INACTIVE)));
-
-  delete thread;
-}
-
-void
-utils_thread_base_test::test_interrupt() {
-  thread_test* thread = new thread_test;
-  thread->set_test_flag(thread_test::test_flag_long_timeout);
-
-  thread->init_thread();
-  thread->start_thread();
-
-  // Vary the various timeouts.
-
-  for (int i = 0; i < 100; i++) {
-    thread->interrupt();
-    usleep(0);
-
-    thread->set_test_flag(thread_test::test_flag_do_work);
-    thread->interrupt();
-
-    // Wait for flag to clear.
-    CPPUNIT_ASSERT(wait_for_true(std::bind(&thread_test::is_not_test_flags, thread, thread_test::test_flag_do_work)));
-  }
-
-  thread->stop_thread();
-  CPPUNIT_ASSERT(wait_for_true(std::bind(&thread_test::is_state, thread, thread_test::STATE_INACTIVE)));
-
-  delete thread;
-}
-
-void
-utils_thread_base_test::test_stop() {
-  CPPUNIT_ASSERT(torrent::thread_base::trylock_global_lock());
-  // torrent::thread_base::acquire_global_lock();
-
-  for (int i = 0; i < 20; i++) {
-    CPPUNIT_ASSERT(!torrent::thread_base::trylock_global_lock());
-
-    thread_test* thread = new thread_test;
-    thread->set_test_flag(thread_test::test_flag_do_work);
-
-    thread->init_thread();
-    thread->start_thread();
-
-    thread->stop_thread_wait();
-    CPPUNIT_ASSERT(thread->is_inactive());
-
-    delete thread;
-  }
-
-  torrent::thread_base::release_global_lock();
-}
diff --git a/test/torrent/utils/thread_base_test.h b/test/torrent/utils/thread_base_test.h
deleted file mode 100644
index 22eb99dc..00000000
--- a/test/torrent/utils/thread_base_test.h
+++ /dev/null
@@ -1,86 +0,0 @@
-#include <cppunit/extensions/HelperMacros.h>
-
-#include "torrent/utils/thread_base.h"
-
-class utils_thread_base_test : public CppUnit::TestFixture {
-  CPPUNIT_TEST_SUITE(utils_thread_base_test);
-  CPPUNIT_TEST(test_basic);
-  CPPUNIT_TEST(test_lifecycle);
-
-  CPPUNIT_TEST(test_global_lock_basic);
-  CPPUNIT_TEST(test_interrupt);
-  CPPUNIT_TEST(test_stop);
-  CPPUNIT_TEST_SUITE_END();
-
-public:
-  void setUp();
-  void tearDown();
-
-  void test_basic();
-  void test_lifecycle();
-
-  void test_global_lock_basic();
-  void test_interrupt();
-  void test_interrupt_legacy();
-  void test_stop();
-};
-
-struct thread_management_type {
-  thread_management_type() { CPPUNIT_ASSERT(torrent::thread_base::trylock_global_lock()); }
-  ~thread_management_type() { torrent::thread_base::release_global_lock(); }
-};
-
-#define SETUP_THREAD()                                                  \
-  thread_management_type thread_management;                             \
-  torrent::thread_disk* thread_disk = new torrent::thread_disk();       \
-  thread_disk->init_thread();
-
-#define CLEANUP_THREAD()                                                \
-  CPPUNIT_ASSERT(wait_for_true(std::bind(&torrent::thread_base::is_inactive, thread_disk))); \
-  delete thread_disk;
-
-bool wait_for_true(std::function<bool ()> test_function);
-
-class thread_test : public torrent::thread_base {
-public:
-  enum test_state {
-    TEST_NONE,
-    TEST_PRE_START,
-    TEST_PRE_STOP,
-    TEST_STOP
-  };
-
-  static const int test_flag_pre_stop       = 0x1;
-  static const int test_flag_long_timeout   = 0x2;
-
-  static const int test_flag_acquire_global = 0x10;
-  static const int test_flag_has_global     = 0x20;
-
-  static const int test_flag_do_work   = 0x100;
-  static const int test_flag_pre_poke  = 0x200;
-  static const int test_flag_post_poke = 0x400;
-
-  thread_test();
-
-  int                 test_state() const { return m_test_state; }
-  bool                is_state(int state) const { return m_state == state; }
-  bool                is_test_state(int state) const { return m_test_state == state; }
-  bool                is_test_flags(int flags) const { return (m_test_flags & flags) == flags; }
-  bool                is_not_test_flags(int flags) const { return !(m_test_flags & flags); }
-
-  const char*         name() const { return "test_thread"; }
-
-  void                init_thread();
-
-  void                set_pre_stop() { __sync_or_and_fetch(&m_test_flags, test_flag_pre_stop); }
-  void                set_acquire_global() { __sync_or_and_fetch(&m_test_flags, test_flag_acquire_global); }
-
-  void                set_test_flag(int flags) { __sync_or_and_fetch(&m_test_flags, flags); }
-
-private:
-  void                call_events();
-  int64_t             next_timeout_usec() { return (m_test_flags & test_flag_long_timeout) ? (10000 * 1000) : (100 * 1000); }
-
-  int                 m_test_state lt_cacheline_aligned;
-  int                 m_test_flags lt_cacheline_aligned;
-};
diff --git a/test/tracker/test_tracker_http.cc b/test/tracker/test_tracker_http.cc
new file mode 100644
index 00000000..399d00d5
--- /dev/null
+++ b/test/tracker/test_tracker_http.cc
@@ -0,0 +1,11 @@
+#include "config.h"
+
+#include "test_tracker_http.h"
+
+#include "tracker/tracker_http.h"
+
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(test_tracker_http, "tracker");
+
+void
+test_tracker_http::test_basic() {
+}
diff --git a/test/tracker/test_tracker_http.h b/test/tracker/test_tracker_http.h
new file mode 100644
index 00000000..ab11a8f7
--- /dev/null
+++ b/test/tracker/test_tracker_http.h
@@ -0,0 +1,12 @@
+#include "helpers/test_fixture.h"
+
+#include "torrent/utils/thread_base.h"
+
+class test_tracker_http : public test_fixture {
+  CPPUNIT_TEST_SUITE(test_tracker_http);
+  CPPUNIT_TEST(test_basic);
+  CPPUNIT_TEST_SUITE_END();
+
+public:
+  void test_basic();
+};
diff --git a/test/tracker/tracker_http_test.cc b/test/tracker/tracker_http_test.cc
deleted file mode 100644
index deda4382..00000000
--- a/test/tracker/tracker_http_test.cc
+++ /dev/null
@@ -1,17 +0,0 @@
-#include "config.h"
-
-#include "tracker_http_test.h"
-
-#include "tracker/tracker_http.h"
-
-void
-tracker_http_test::setUp() {
-}
-
-void
-tracker_http_test::tearDown() {
-}
-
-void
-tracker_http_test::test_basic() {
-}
diff --git a/test/tracker/tracker_http_test.h b/test/tracker/tracker_http_test.h
deleted file mode 100644
index 11ff8246..00000000
--- a/test/tracker/tracker_http_test.h
+++ /dev/null
@@ -1,18 +0,0 @@
-#include <cppunit/extensions/HelperMacros.h>
-
-#include "tracker/tracker_http.h"
-
-class tracker_http_test : public CppUnit::TestFixture {
-  CPPUNIT_TEST_SUITE(tracker_http_test);
-  CPPUNIT_TEST(test_basic);
-  CPPUNIT_TEST(test_scrape);
-  CPPUNIT_TEST_SUITE_END();
-
-public:
-  void setUp();
-  void tearDown();
-
-  void test_basic();
-
-  void test_scrape();
-};
