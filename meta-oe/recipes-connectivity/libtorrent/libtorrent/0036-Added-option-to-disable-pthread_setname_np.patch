From e5ed6301e0d07adeaab10e9924a8c9a2e327cdc5 Mon Sep 17 00:00:00 2001
From: rakshasa <sundell.software@gmail.com>
Date: Thu, 29 Apr 2021 19:33:04 +0900
Subject: [PATCH] Added option to disable pthread_setname_np.

---
 configure.ac                     | 30 +++++++++++++++++++-----------
 scripts/checks.m4                | 18 ++++++++++++++++++
 src/torrent/utils/thread_base.cc | 16 ++++++++++++++--
 3 files changed, 51 insertions(+), 13 deletions(-)

diff --git a/configure.ac b/configure.ac
index 197bbc94..73caf712 100644
--- a/configure.ac
+++ b/configure.ac
@@ -24,9 +24,9 @@ AC_PROG_CXX
 AC_SYS_LARGEFILE
 
 AC_C_BIGENDIAN(
-    AC_DEFINE(IS_BIG_ENDIAN, 1, Big endian),
-    AC_DEFINE(IS_LITTLE_ENDIAN, 1, Little endian),
-    AC_MSG_ERROR([Could not determine endianness])
+  AC_DEFINE(IS_BIG_ENDIAN, 1, Big endian),
+  AC_DEFINE(IS_LITTLE_ENDIAN, 1, Little endian),
+  AC_MSG_ERROR([Could not determine endianness])
 )
 
 RAK_CHECK_CFLAGS
@@ -54,7 +54,15 @@ TORRENT_WITHOUT_STATVFS
 TORRENT_WITHOUT_STATFS
 TORRENT_WITH_INOTIFY
 
-CC_ATTRIBUTE_VISIBILITY
+AC_ARG_ENABLE(attribute-visibility,
+  AC_HELP_STRING([--disable-attribute-visibility], [disable symbol visibility attribute [[default=enable]]]),
+  [
+    if test "$enableval" = "yes"; then
+      CC_ATTRIBUTE_VISIBILITY
+    fi
+  ],[
+    CC_ATTRIBUTE_VISIBILITY
+  ])
 
 AX_CHECK_ZLIB
 AX_EXECINFO
@@ -71,11 +79,11 @@ TORRENT_ARG_CYRUS_RC4
 
 AC_CHECK_FUNCS(posix_memalign)
 
-TORRENT_CHECK_MADVISE()
-TORRENT_CHECK_CACHELINE()
-TORRENT_CHECK_POPCOUNT()
-TORRENT_CHECK_PTHREAD_SETNAME_NP()
-TORRENT_MINCORE()
+TORRENT_CHECK_MADVISE
+TORRENT_CHECK_CACHELINE
+TORRENT_CHECK_POPCOUNT
+TORRENT_DISABLE_PTHREAD_SETNAME_NP
+TORRENT_MINCORE
 
 TORRENT_DISABLE_INSTRUMENTATION
 
@@ -88,8 +96,8 @@ AC_SUBST(LIBTORRENT_CFLAGS)
 AC_DEFINE(HAVE_CONFIG_H, 1, true if config.h was included)
 
 CC_ATTRIBUTE_UNUSED(
-	AC_DEFINE([__UNUSED], [__attribute__((unused))], [Wrapper around unused attribute]),
-	AC_DEFINE([__UNUSED], [], [Null-wrapper if unused attribute is unsupported])
+  AC_DEFINE([__UNUSED], [__attribute__((unused))], [Wrapper around unused attribute]),
+  AC_DEFINE([__UNUSED], [], [Null-wrapper if unused attribute is unsupported])
 )
 
 AC_OUTPUT([
diff --git a/scripts/checks.m4 b/scripts/checks.m4
index 98ef17f8..915a5011 100644
--- a/scripts/checks.m4
+++ b/scripts/checks.m4
@@ -490,3 +490,21 @@ AC_DEFUN([TORRENT_CHECK_PTHREAD_SETNAME_NP], [
     ])
   ])
 ])
+
+AC_DEFUN([TORRENT_DISABLE_PTHREAD_SETNAME_NP], [
+  AC_MSG_CHECKING([for pthread_setname_no])
+
+  AC_ARG_ENABLE(pthread-setname-np,
+    AC_HELP_STRING([--disable-pthread-setname-np], [disable pthread_setname_np]),
+    [
+      if test "$enableval" = "no"; then
+        AC_MSG_RESULT(disabled)
+      else
+        AC_MSG_RESULT(checking)
+        TORRENT_CHECK_PTHREAD_SETNAME_NP
+      fi
+    ], [
+      TORRENT_CHECK_PTHREAD_SETNAME_NP
+    ]
+  )
+])
diff --git a/src/torrent/utils/thread_base.cc b/src/torrent/utils/thread_base.cc
index 99d6355d..ec0619f3 100644
--- a/src/torrent/utils/thread_base.cc
+++ b/src/torrent/utils/thread_base.cc
@@ -41,10 +41,16 @@ thread_base::~thread_base() {
 
 void
 thread_base::start_thread() {
-  if (m_poll == NULL)
+  if (this == nullptr)
+    throw internal_error("Called thread_base::start_thread on a nullptr.");
+
+  if (m_poll == nullptr)
     throw internal_error("No poll object for thread defined.");
 
-  if (!is_initialized() || pthread_create(&m_thread, NULL, (pthread_func)&thread_base::event_loop, this))
+  if (!is_initialized())
+    throw internal_error("Called thread_base::start_thread on an uninitialized object.");
+
+  if (pthread_create(&m_thread, NULL, (pthread_func)&thread_base::event_loop, this))
     throw internal_error("Failed to create thread.");
 }
 
@@ -82,6 +88,12 @@ thread_base::should_handle_sigusr1() {
 
 void*
 thread_base::event_loop(thread_base* thread) {
+  if (thread == nullptr)
+    throw internal_error("thread_base::event_loop called with a null pointer thread");
+
+  if (!thread->is_initialized())
+    throw internal_error("thread_base::event_loop call on an uninitialized object");
+
   __sync_lock_test_and_set(&thread->m_state, STATE_ACTIVE);
 
 #if defined(HAS_PTHREAD_SETNAME_NP_DARWIN)
